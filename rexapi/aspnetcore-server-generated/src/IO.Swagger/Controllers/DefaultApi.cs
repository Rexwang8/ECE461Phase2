/*
 * ECE 461 - Spring 2023 - Project 2
 *
 * API for ECE 461/Spring 2023/Project 2: A Trustworthy Module Registry
 *
 * OpenAPI spec version: 2.0.0
 * Contact: davisjam@purdue.edu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using IO.Swagger.Controllers;
using System.Security.Cryptography;
using Google.Apis.Auth.OAuth2;
using Google.Cloud.BigQuery.V2;
using Google.Apis.Bigquery.v2.Data;
using System.Text.RegularExpressions;
using Google.Cloud.SecretManager.V1;
using Google.Protobuf;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using System.Linq;
using IO.Swagger.CLI;
using LibGit2Sharp;
using System.Threading;
using System.IO;
using Microsoft.AspNetCore.Cors;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    {
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create an access token.</remarks>
        /// <param name="body"></param>
        /// <response code="200">Return an AuthenticationToken.</response>
        /// <response code="400">There is missing field(s) in the AuthenticationRequest or it is formed improperly.</response>
        /// <response code="401">The user or password is invalid.</response>
        /// <response code="501">This system does not support authentication.</response>
        [HttpPut]
        [Route("/authenticate")]
        [ValidateModelState]
        [SwaggerOperation("CreateAuthToken")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Return an AuthenticationToken.")]
        public virtual IActionResult CreateAuthToken([FromBody] AuthenticationRequest body)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            //generate runid
            int runid = new Random().Next(1000, 2000);
            if (body.User != null)
            {
                Console.WriteLine($"(authenticate/{runid}) Received request to authenticate user: " + body.User.Name);
                Response.Headers.Add($"X-Debug98032", $"authenticate/{runid} Received request to authenticate user: " + body.User.Name);
            }
            else
            {
                Console.WriteLine($"(authenticate/{runid}) Received request to authenticate user: null");
                Response.Headers.Add($"X-Debug12543", $"authenticate/{runid} Received request to authenticate user: null");
            }
            if (body.User != null && body.Secret != null)
            {
                Console.WriteLine($"(authenticate/{runid}) args: " + body.User.Name + " " + body.Secret.Password + " " + body.User.IsAdmin);
                Response.Headers.Add($"X-Debug1231", $"authenticate/{runid} args: " + body.User.Name + " " + body.Secret.Password + " " + body.User.IsAdmin);
            }
            else
            {
                if (body.User != null)
                {
                    Console.WriteLine($"(authenticate/{runid}) args: " + body.User.Name + " null " + body.User.IsAdmin);
                    Response.Headers.Add($"X-Debug234908", $"authenticate/{runid} args: " + body.User.Name + " null " + body.User.IsAdmin);
                }
                if (body.Secret != null)
                {
                    Console.WriteLine($"(authenticate/{runid}) args: null " + body.Secret.Password + " null");
                    Response.Headers.Add($"X-Debug03948", $"authenticate/{runid} args: null " + body.Secret.Password + " null");
                }
            }

            Console.WriteLine("------END DEBUG INFO-----");

            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");
            Response.Headers.Add("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE");

            string username = body.User.Name;
            bool? admin = body.User.IsAdmin;
            string password = body.Secret.Password;

            if (body.User == null || body.Secret == null)
            {
                Response.Headers.Add("X-Debug", "Missing field(s) in the AuthenticationRequest or it is formed improperly");
                Console.WriteLine("(authenticate/X-Debug) Missing field(s) in the AuthenticationRequest or it is formed improperly");
                return StatusCode(400);
            }

            //check if any fields are null or empty
            if (username == null || password == null || username == "" || password == "" || admin == null)
            {
                Response.Headers.Add("X-Debug", "Missing field(s) in the AuthenticationRequest or it is formed improperly");
                Console.WriteLine("(authenticate/X-Debug) Missing field(s) in the AuthenticationRequest or it is formed improperly");
                return StatusCode(400);
            }

            //check if username or password is invalid
            if (username == "invalid" || password == "invalid")
            {
                Response.Headers.Add("X-Debug", "The user or password is invalid");
                Console.WriteLine("(authenticate/X-Debug) The user or password is invalid");
                return StatusCode(401);
            }


            //sanitize input
            string SanitizedUsername = Sanitizer.SanitizeString(username);
            string SanitizedPassword = Sanitizer.SanitizeString(password);

            TokenAuthenticator authenticator = new TokenAuthenticator();
            authenticator.setPassword(SanitizedPassword);
            authenticator.setUsername(SanitizedUsername);
            authenticator.setAdmin(admin);
            string token = authenticator.GenerateTokenFromCredentials();
            if (token == null)
            {
                Response.Headers.Add("X-Debug", "Credentials failed to generate token");
                Console.WriteLine("(authenticate/X-Debug) Credentials failed to generate token");
                return StatusCode(401);
            }
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateCredentials();
            if (UserStatus == TokenAuthenticator.AuthResults.NO_RESULTS)
            {
                //user does not exist, add user to database
                Response.Headers.Add("X-Debug", "User does not exist, adding user to database");
                Console.WriteLine("(authenticate/X-Debug) User does not exist, adding user to database");
                authenticator.AddUserToDatabaseIfNotExists(token);
            }
            else if (UserStatus == TokenAuthenticator.AuthResults.WRONG_PASSWORD || UserStatus == TokenAuthenticator.AuthResults.TOKEN_INVALID)
            {
                //wrong password, return error
                if (UserStatus == TokenAuthenticator.AuthResults.WRONG_PASSWORD)
                {
                    Response.Headers.Add("X-Debug", "Wrong password, returning error");
                    Console.WriteLine("(authenticate/X-Debug) Wrong password, returning error");
                }
                else if (UserStatus == TokenAuthenticator.AuthResults.TOKEN_INVALID)
                {
                    Response.Headers.Add("X-Debug", "Invalid token, returning error");
                    Console.WriteLine("(authenticate/X-Debug) Invalid token, returning error");
                }
                return StatusCode(401);
            }
            else if (UserStatus == TokenAuthenticator.AuthResults.TOKEN_OVERLIMIT || UserStatus == TokenAuthenticator.AuthResults.TOKEN_EXPIRED)
            {
                //Refresh token
                if (UserStatus == TokenAuthenticator.AuthResults.TOKEN_OVERLIMIT)
                {
                    Response.Headers.Add("X-Debug", "Token overlimit, refreshing token");
                    Console.WriteLine("(authenticate/X-Debug) Token overlimit, refreshing token");
                }
                else if (UserStatus == TokenAuthenticator.AuthResults.TOKEN_EXPIRED)
                {
                    Response.Headers.Add("X-Debug", "Token expired, refreshing token");
                    Console.WriteLine("(authenticate/X-Debug) Token expired, refreshing token");
                }
                authenticator.UpdateUserDateRefreshToken();
            }

            //add the token to the header of the response in the X-Authorization field
            Response.Headers.Add("X-Authorization", token);
            Console.WriteLine("(authenticate/X-Debug) Token: " + token);

            //set the token as the response body
            return new ObjectResult(token);
        }

        /// <summary>
        /// Delete all versions of this package.
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="name"></param>
        /// <response code="200">Package is deleted.</response>
        /// <response code="400">There is missing field(s) in the PackageName/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="404">Package does not exist.</response>
        [HttpDelete]
        [Route("/package/byName/{name}")]
        [ValidateModelState]
        [SwaggerOperation("PackageByNameDelete")]
        public virtual IActionResult PackageByNameDelete([FromHeader(Name = "X-Authorization")][Required()] string xAuthorization, [FromRoute][Required] string name)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            int runid = new Random().Next(1000, 2000);
            if (name != null && xAuthorization != null)
            {
                Console.WriteLine($"(PackageByNameDelete/{runid}) Received request to delete package: " + name);
                Console.WriteLine($"(PackageByNameDelete/{runid}) args: " + xAuthorization + ", " + name);
                Response.Headers.Add("X-DebugAutograder", $"(PackageByNameDelete/{runid}) Received request to delete package: " + name);
                Response.Headers.Add("X-DebugArgs", $"(PackageByNameDelete/{runid}) args: " + xAuthorization + ", " + name);
            }

            Console.WriteLine("------END DEBUG INFO-----");

            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");
            if (xAuthorization == null)
            {
                Response.Headers.Add("X-Debug", "Missing field(s) in the AuthenticationToken or it is formed improperly");
                Console.WriteLine("(/package/byName/{name}/X-Debug) Missing field(s) in the AuthenticationToken or it is formed improperly");
                return StatusCode(400);
            }
            string token = xAuthorization;

            //Sanitize Inputs
            if (!Sanitizer.VerifyTokenSanitized(token))
            {
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                Console.WriteLine("(/package/byName/{name}/X-Debug) Token is not sanitized");
                return StatusCode(400);
            }

            if (!Sanitizer.VerifyPackageNameSafe(name))
            {
                Response.Headers.Add("X-Debug", "Name is not sanitized");
                Console.WriteLine("(/package/byName/{name}/X-Debug) Name is not sanitized");
                return StatusCode(400);
            }

            //Check Token Permissions
            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);

            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN)
            {
                Response.Headers.Add("X-Debug", "User has no perms");
                Console.WriteLine("(/package/byName/{name}/X-Debug) User has no perms");
                return StatusCode(400);
            }

            //Decrement Token uses
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Response.Headers.Add("X-Debug", "Token decrement failed");
                Console.WriteLine("(/package/byName/{name}/X-Debug) Token decrement failed");
                return StatusCode(400);
            }

            if (name == null)
            {
                Response.Headers.Add("X-Debug", "Missing field(s) in the PackageName or it is formed improperly");
                Console.WriteLine("(/package/byName/{name}/X-Debug) Missing field(s) in the PackageName or it is formed improperly");
                return StatusCode(400);
            }


            try
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) User: " + authenticator.getUsername() + " Admin: " + authenticator.getAdmin());
                Response.Headers.Add("X-DebugUser", "User: " + authenticator.getUsername() + " Admin: " + authenticator.getAdmin());
            }
            catch (Exception e)
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) User: " + "null" + " Admin: " + "null" + "error" + e.ToString());
                Response.Headers.Add("X-DebugUser", "User: " + "null" + " Admin: " + "null" + "error" + e.ToString());
            }

            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults result = null;
            string query = $"SELECT * FROM `package-registry-461.packages.packagesMetadata` WHERE name='{name}' ORDER BY version DESC LIMIT 1";
            factory.SetQuery(query);
            try
            {
                result = factory.ExecuteQuery();
            }
            catch (Exception e)
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) Query failed" + "error" + e.ToString());
                Response.Headers.Add("X-Debug", "Query failed" + "error" + e.ToString());
                return StatusCode(400);
            }


            //get metadata for package, most recent version
            if (result == null)
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) Query failed");
                Response.Headers.Add("X-Debug", "Query failed");
                return StatusCode(400);
            }
            if (result.TotalRows == 0)
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) Package does not exist");
                Response.Headers.Add("X-Debug", "Package does not exist");
                return StatusCode(404);
            }

            PackageMetadata metadata = new PackageMetadata();
            try
            {

                foreach (BigQueryRow row in result)
                {
                    //Name
                    if (row["name"] != null)
                    {
                        metadata.Name = row["name"].ToString();
                    }
                    else
                    {
                        metadata.Name = "invalid";
                    }

                    //Version
                    if (row["version"] != null)
                    {
                        metadata.Version = row["version"].ToString();
                    }
                    else
                    {
                        metadata.Version = "invalid";
                    }

                    //ID
                    if (row["id"] != null)
                    {
                        metadata.ID = row["id"].ToString();
                    }
                    else
                    {
                        metadata.ID = "invalid";
                    }

                }
                Console.WriteLine("(/package/byName/{name}/X-Debug) Metadata: " + metadata.Name + " " + metadata.Version + " " + metadata.ID);
                Response.Headers.Add("X-DebugStatus", "Metadata: " + metadata.Name + " " + metadata.Version + " " + metadata.ID);
            }
            catch (Exception e)
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) Metadata: " + "invalid" + "error" + e.ToString());
                Response.Headers.Add("X-DebugStatus", "Metadata: " + "invalid" + "error" + e.ToString());
                return StatusCode(400);
            }



            //--------------------Add to History Query------------------------------------

            try
            {
                query = $"INSERT INTO `package-registry-461.packages.packagesHistory` (action, date, user_isadmin, user_name, packagemetadata_id, packagemetadata_name, packagemetadata_version) VALUES ('DELETE', DATETIME(CURRENT_TIMESTAMP()), true, '{authenticator.getUsername()}', '{metadata.ID}', '{metadata.Name}', '{metadata.Version}')";
                factory.SetQuery(query);
                result = factory.ExecuteQuery();
            }
            catch (Exception e)
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) Query failed: Result: " + result.ToString() + "error" + e.ToString());
                Response.Headers.Add("X-DebugQuery", "Query failed: Result: " + result.ToString() + "error" + e.ToString());
                return StatusCode(400);
            }

            //-----------------------Delete from Meta Data Query------------------------------------
            query = $"DELETE `package-registry-461.packages.packagesMetadata` entry WHERE entry.name IN (SELECT name from `package-registry-461.packages.packagesMetadata` WHERE name = '{name}' LIMIT 100)";
            factory.SetQuery(query);
            result = factory.ExecuteQuery();

            //--------------------Delete from Packages Data Query------------------------------------
            query = $"DELETE `package-registry-461.packages.packagesData` entry WHERE entry.name IN (SELECT name from `package-registry-461.packages.packagesData` WHERE name = '{name}' LIMIT 100)";
            factory.SetQuery(query);
            result = factory.ExecuteQuery();
            //--------------------Delete from cloud store------------------------------------





            return StatusCode(200);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Return the history of this package (all versions).</remarks>
        /// <param name="name"></param>
        /// <param name="xAuthorization"></param>
        /// <response code="200">Return the package history.</response>
        /// <response code="400">There is missing field(s) in the PackageName/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="404">No such package.</response>
        /// <response code="0">unexpected error</response>
        [HttpGet]
        [Route("/package/byName/{name}")]
        [ValidateModelState]
        [SwaggerOperation("PackageByNameGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PackageHistoryEntry>), description: "Return the package history.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult PackageByNameGet([FromRoute][Required] string name, [FromHeader(Name = "X-Authorization")][Required()] string xAuthorization)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            int runid = new Random().Next(1000, 2000);
            if (name != null && xAuthorization != null)
            {
                Console.WriteLine($"(PackageByNameGet/{runid}) args : " + name + ", " + xAuthorization);
                Response.Headers.Add("X-DebugAutograder", "PackageByNameGet/" + runid + " args : " + name + ", " + xAuthorization);
            }
            Console.WriteLine("------END DEBUG INFO-----");



            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");

            if (xAuthorization == null || name == null)
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) Missing field(s)");
                Response.Headers.Add("X-Debug", "Missing field(s)");
                return StatusCode(400);
            }

            //Get Variables
            string token = xAuthorization;
            string packagename = name;

            //Validate token
            bool isSanitized = Sanitizer.VerifyTokenSanitized(token);
            if (!isSanitized)
            {
                //append debug message to header
                Console.WriteLine("(/package/byName/{name}/X-Debug) Token is not sanitized");
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                return StatusCode(400);
            }
            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);
            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_USER && UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN)
            {
                //append debug message to header
                Console.WriteLine("(/package/byName/{name}/X-Debug) Token is invalid");
                Response.Headers.Add("X-Debug", "Token is invalid");
                return StatusCode(400);
            }

            //decrement token
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) Token decrement failed");
                Response.Headers.Add("X-Debug", "Token decrement failed");
                return StatusCode(400);
            }

            bool isSanitizedName = Sanitizer.VerifyPackageNameSafe(packagename);
            if (!isSanitizedName)
            {
                //append debug message to header
                Console.WriteLine("(/package/byName/{name}/X-Debug) Package name is not sanitized");
                Response.Headers.Add("X-Debug", "Package name is not sanitized");
                return StatusCode(400);
            }

            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults result = null;

            //query database get all rows with the package name and return them
            string query = $"SELECT * FROM `package-registry-461.packages.packagesHistory` WHERE packagemetadata_name = '{packagename}' ORDER BY date LIMIT 100";
            factory.SetQuery(query);
            result = factory.ExecuteQuery();

            // Print out the name and type of each column
            string Buffer = "Schema: ";
            foreach (var col in result.Schema.Fields)
            {
                Buffer += col.Name + " " + col.Type + ", ";
            }
            Console.WriteLine("(/package/byName/{name}/X-DebugSchema) " + Buffer);
            Response.Headers.Add("X-DebugSchema", Buffer);
            if (result.TotalRows == 0)
            {
                //append debug message to header
                Console.WriteLine("(/package/byName/{name}/X-Debug) Package does not exist");
                Response.Headers.Add("X-Debug", "Package does not exist");
                return StatusCode(404);
            }

            List<PackageHistoryEntry> packageHistoryEntries = new List<PackageHistoryEntry>();

            //create list of PackageHistoryEntry objects
            packageHistoryEntries = factory.GetPackageHistoryFromResults(result);

            //return list of package history entries in response body, formatted as ndjson [{},{}]
            Console.WriteLine("(/package/byName/{name}/X-Debug) Package history returned");
            Response.Headers.Add("X-Debug", "Package history returned");
            return StatusCode(200, packageHistoryEntries);
        }

        /// <summary>
        /// Get any packages fitting the regular expression.
        /// </summary>
        /// <remarks>Search for a package using regular expression over package names and READMEs. This is similar to search by name.</remarks>
        /// <param name="body"></param>
        /// <param name="xAuthorization"></param>
        /// <response code="200">Return a list of packages.</response>
        /// <response code="400">There is missing field(s) in the PackageRegEx/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="404">No package found under this regex.</response>
        [HttpPost]
        [Route("/package/byRegEx")]
        [ValidateModelState]
        [SwaggerOperation("PackageByRegExGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PackageMetadata>), description: "Return a list of packages.")]
        public virtual IActionResult PackageByRegExGet([FromBody] PackageRegex body, [FromHeader(Name = "X-Authorization")][Required()] string xAuthorization)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            int runid = new Random().Next(1000, 2000);
            if (body.Regex != null || xAuthorization != null)
            {
                Console.WriteLine($"(PackageByRegExGet/{runid}) args : " + body.Regex + ", " + xAuthorization);
                Response.Headers.Add("X-DebugAutograder", "PackageByRegExGet/" + runid + " args : " + body.Regex + ", " + xAuthorization);

            }
            Console.WriteLine("------END DEBUG INFO-----");

            if (body.Regex == null || xAuthorization == null)
            {
                Console.WriteLine("(/package/byRegEx/X-Debug) Missing field(s)");
                Response.Headers.Add("X-Debug", "Missing field(s)");
                return StatusCode(400);
            }

            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");

            string token = xAuthorization;
            bool isSantized = Sanitizer.VerifyTokenSanitized(token);
            if (!isSantized)
            {
                Console.WriteLine("(/package/byRegEx/X-Debug) Token is not sanitized");
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                return StatusCode(400, "");
            }
            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);
            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_USER && UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN)
            {
                //append debug message to header
                Console.WriteLine("(/package/byRegEx/X-Debug) Token is invalid");
                Response.Headers.Add("X-Debug", "Token is invalid");
                return StatusCode(400);
            }

            //decrement token
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Console.WriteLine("(/package/byRegEx/X-Debug) Token decrement failed");
                Response.Headers.Add("X-Debug", "Token decrement failed");
                return StatusCode(400);
            }


            string unsanitizedregex = body.Regex;

            string pattern = Sanitizer.SantizeRegex(unsanitizedregex);
            if (pattern == null)
            {
                //append debug message to header
                Console.WriteLine("(/package/byRegEx/X-Debug) Regex is null");
                Response.Headers.Add("X-Debug", "Regex is null");
                return StatusCode(400);
            }

            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults result = null;
            string query = $"SELECT * FROM `package-registry-461.packages.packagesMetadata` WHERE REGEXP_CONTAINS(name, r'{pattern}') LIMIT 100";
            factory.SetQuery(query);

            result = factory.ExecuteQuery();

            if (result.TotalRows == 0)
            {
                //append debug message to header
                Console.WriteLine("(/package/byRegEx/X-Debug) No packages found for regex + " + pattern + "  " + factory.GetQuery());
                Response.Headers.Add("X-Debug", "No packages found for regex + " + pattern + "  " + factory.GetQuery());
                return StatusCode(404);
            }

            List<PackageMetadata> packageMetadata = new List<PackageMetadata>();
            packageMetadata = factory.GetPackageMetadataFromResults(result);

            //return list of package metadata in response body, formatted as ndjson [{},{}]
            Console.WriteLine("(/package/byRegEx/X-Debug) Package metadata returned");
            Response.Headers.Add("X-Debug", "Package metadata returned");
            return StatusCode(200, packageMetadata);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="xAuthorization"></param>
        /// <response code="201">Success. Check the ID in the returned metadata for the official ID.</response>
        /// <response code="400">There is missing field(s) in the PackageData/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="409">Package exists already.</response>
        /// <response code="424">Package is not uploaded due to the disqualified rating.</response>
        [HttpPost]
        [Route("/package")]
        [ValidateModelState]
        [SwaggerOperation("PackageCreate")]
        [SwaggerResponse(statusCode: 201, type: typeof(Package), description: "Success. Check the ID in the returned metadata for the official ID.")]
        public virtual IActionResult PackageCreate([FromBody] PackageData body, [FromHeader(Name = "X-Authorization")][Required()] string xAuthorization)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            int runid = new Random().Next(1000, 2000);
            Console.WriteLine("(PackageCreate/" + runid + ") args : " + body + ", " + xAuthorization);
            if (body.Content != null)
            {
                Console.WriteLine($"(PackageCreate/{runid}) args : " + xAuthorization + ", " + body.URL + ", " + (body.Content.Length <= 100 ? body.Content : body.Content.Substring(0, 100)));
            }
            else
            {
                Console.WriteLine($"(PackageCreate/{runid}) args : " + xAuthorization + ", " + body.URL);
            }
            Console.WriteLine("------END DEBUG INFO-----");


            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");
            bool flagBodyUrlEmpty = false;
            if (body.URL == null || body.URL == "")
            {
                flagBodyUrlEmpty = true;
            }
            bool flagBodyContentEmpty = false;
            if (body.Content == null || body.Content == "")
            {
                flagBodyContentEmpty = true;
            }

            Console.WriteLine("(/package/X-Debug) flagBodyUrlEmpty: " + flagBodyUrlEmpty);
            Console.WriteLine("(/package/X-Debug) flagBodyContentEmpty: " + flagBodyContentEmpty);

            if (flagBodyUrlEmpty && flagBodyContentEmpty)
            {
                Console.WriteLine("(/package/X-Debug) Missing field(s)");
                Response.Headers.Add("X-Debug", "Missing field(s)");
                return StatusCode(400);
            }
            if (flagBodyContentEmpty == false && flagBodyUrlEmpty == false)
            {
                Console.WriteLine("(/package/X-Debug) Too many fields");
                Response.Headers.Add("X-Debug", "Too many fields");
                return StatusCode(400);
            }


            if (xAuthorization == null)
            {
                Console.WriteLine("(/package/X-Debug) Missing field(s)");
                Response.Headers.Add("X-Debug", "Missing field(s)");
                return StatusCode(400);
            }

            string token = xAuthorization;

            //verify token
            if (!Sanitizer.VerifyTokenSanitized(token))
            {
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                Console.WriteLine("(/package/X-Debug) Token is not sanitized");
                return StatusCode(400);
            }

            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);

            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_USER && UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN)
            {
                //append debug message to header
                Response.Headers.Add("X-Debug", "Token is invalid");
                Console.WriteLine("(/package/X-Debug) Token is invalid");
                return StatusCode(400);
            }

            //-------------Add package to metadata table ----------------
            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults result = null;

            //sanitize package name, version, and id
            string Name = "";
            string versionfromfile = "";
            Version ver = null;
            string urltoinit = "";
            FileInfo fileinfo = null;
            if (body.URL != null && body.URL != "")
            {
                urltoinit = body.URL;
            }
            URLInfo urlInfo = new URLInfo(urltoinit);
            urlInfo.setPath("/app/TempDirectory");
            string URL = "";
            Console.WriteLine("URL: " + body.URL);
            if (!flagBodyUrlEmpty)
            {
                //Clean up
                if (Directory.Exists("/app/TempDirectory"))
                {
                    Directory.Delete("/app/TempDirectory", true);
                }

                fileinfo = new FileInfo("/app/TempPackage.zip");
                if (fileinfo.Exists)
                {
                    fileinfo.Delete();
                }

                Name = (body.URL).Split('/').Last();
                Console.WriteLine("Name of package: " + Name);
                
                //Download Package
                //await clonepackage to finish
                var task = urlInfo.ClonePackage();
                task.Wait();

                if (!urlInfo.SuccessClone)
                {
                    //append debug message to header
                    Response.Headers.Add("X-Debug", "Package could not be downloaded");
                    Console.WriteLine("(/package/X-Debug) Package could not be downloaded");
                    return StatusCode(400);
                }
                Console.WriteLine("Package downloaded");
                urlInfo.path = "/app/TempDirectory";
                urlInfo.getJsonFile("/app/TempDirectory");
                //urlInfo.returnGHURLfrompackagejson();
                urlInfo.initType();
                urlInfo.initName();

                //check package downloaded properly
                if (!Directory.Exists("/app/TempDirectory"))
                {
                    Response.Headers.Add("X-Debug", "Package download failed, can't find package");
                    Console.WriteLine("(/package/X-Debug) Package download failed, can't find package");
                    return StatusCode(400);
                }


                //Get Json file
                urlInfo.getJsonFile("/app/TempDirectory");
                //Get the version
                versionfromfile = urlInfo.returnVersionFromPackage();
                ver = new Version(versionfromfile);
                if (ver.getValidVersion() == false)
                {
                    Response.Headers.Add("X-Debug", "Invalid version (Attempted to add package with version " + versionfromfile + ")");
                    Console.WriteLine("(/package/X-Debug) Invalid version (Attempted to add package with version " + versionfromfile + ")");
                    return StatusCode(400);
                }
                URL = body.URL;

                Response.Headers.Add("Check", $"Name = {Name}, Version = {ver.ToString()}");
                Console.WriteLine($"(/package/X-Debug) Name = {Name}, Version = {ver.ToString()}");
                //get Body Content
                System.IO.Compression.ZipFile.CreateFromDirectory("/app/TempDirectory", "/app/TempPackage.zip");
                Console.WriteLine("Package was zipped");
                body.Content = Base64Encoder.Encode("/app/TempPackage.zip");
                Console.WriteLine("Package was encoded");
                Console.WriteLine("Line 605");
            }
            else if (!flagBodyContentEmpty)
            {
                //check existing
                string workingdir = Directory.GetCurrentDirectory();
                bool ifdirexists = Directory.Exists("/app/TempDirectory");
                fileinfo = new FileInfo("/app/TempPackage.zip");
                bool ifzipexists = fileinfo.Exists;

                Response.Headers.Add("Check", $"workingdir = {workingdir}, ifdirexists = {ifdirexists}, ifzipexists = {ifzipexists}");
                //Clean up
                if (Directory.Exists("/app/TempDirectory"))
                {
                    Directory.Delete("/app/TempDirectory", true);
                }

                fileinfo = new FileInfo("/app/TempPackage.zip");
                if (fileinfo.Exists)
                {
                    fileinfo.Delete();
                }


                try
                {
                    //convert base64 into zip
                    Base64Encoder.Decode(body.Content, "/app/TempPackage.zip");
                    fileinfo = new FileInfo("/app/TempPackage.zip");
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception: " + e.Message);
                }





                //unzip the zip file
                Directory.CreateDirectory("/app/TempDirectory");
                //list all files in working directory
                try
                {
                    System.IO.Compression.ZipFile.ExtractToDirectory("/app/TempPackage.zip", "/app/TempDirectory");
                }
                catch (Exception e)
                {
                    Console.WriteLine("Zip file is invalid or corrupted");
                    Response.Headers.Add("X-Debug", "Zip file is invalid or corrupted");
                    return StatusCode(400);
                }
                Console.WriteLine("Package was unzipped");
                if (!Directory.Exists("/app/TempDirectory"))
                {
                    Response.Headers.Add("X-Debug", "Package download failed, can't find package");
                    Console.WriteLine("(/package/X-Debug) Package download failed, can't find package");
                    return StatusCode(400);
                }


                //get Json file
                urlInfo.setPath("/app/TempDirectory");
                urlInfo.getJsonFile("/app/TempDirectory");
                urlInfo.returnGHURLfrompackagejson();
                urlInfo.initType();
                urlInfo.initName();

                //get name
                Name = urlInfo.returnNameFromPackage();
                //get version
                versionfromfile = urlInfo.returnVersionFromPackage();
                Console.WriteLine("Version from file: " + versionfromfile);
                ver = new Version(versionfromfile);
                if (ver.getValidVersion() == false)
                {
                    Response.Headers.Add("X-Debugversion", "Invalid version");
                    Console.WriteLine("(/package/X-Debug) Invalid version");
                    return StatusCode(400);
                }

                Console.WriteLine("Content finished for name: " + Name + " and version: " + ver.ToString());
            }
            else
            {
                //append debug message to header
                Response.Headers.Add("X-Debug", "Package is missing both content and url");
                Console.WriteLine("(/package/X-Debug) Package is missing both content and url");
                return StatusCode(400);
            }

            Name = Sanitizer.SantizeRegex(Name);
            string ID = Guid.NewGuid().ToString();

            //Get data for package Rating
            APICalls.GetURLStatistics(urlInfo);
            Console.WriteLine(urlInfo.getNPMInfo());
            StaticAnalysisLibrary StaticAnalysis = new StaticAnalysisLibrary();
            StaticAnalysis.Analyze(urlInfo);
            Console.WriteLine("Line 647 " + urlInfo.codeCharCount);

            string[] LicenseList = { "Academic Free", "Apache", "Artistic", "Boost", "BSD", "BSD", "BSD", "BSD", "CC0 1.0 Universal", "(CC0 1.0)", "CeCILL-2.1", "CeCILL-B", "Common Public license", "(CPL-1.0)", "Creative Commons Attribution No Derivatives 4.0 International", "Creative Commons Attribution 3.0 Unported", "(CC BY 3.0)", "Creative Commons Attribution Non Commercial Share Alike 4.0 International", "Creative Commons Attribution Share Alike 4.0 International", "Creative Commons Attribution 4.0 International", "(CC-BY-4.0)", "Deutsche Freie", "Eclipse", "European Union Public License", "(EUPL)", "GNU General Public License", "(GPL)", "GNU Affero", "ISC License", "LaTeX Project", "Microsoft Reciprocal", "MIT", "ODC Open Database", "(ODbL)", "ODC Public Domain Dedication", "(PDDL)", "Open Software license", "(OSL-3.0)", "Open Data Commons Attribution", "(ODC-BY)", "PostgreSQL", "The Universal Permissive", "Illinois", "NCSA", "Unlicense", "Do What The F*ck You Want To Public License", "WTFPL", "zlib", "libpng" };
            //log out ratings
            Console.WriteLine($"Maintainer Rating: {Grader.GetResponseMaintainerScore(urlInfo)}");
            Console.WriteLine($"RampUp Rating: {Grader.GetRampupTimeScore(urlInfo)}");
            Console.WriteLine($"Dependency Rating: {Grader.GetDependencyScore(urlInfo)}");
            Console.WriteLine($"Correctness Rating: {Grader.GetCorrectnessScore(urlInfo)}");
            Console.WriteLine($"BusFactor Rating: {Grader.GetBusFactorScore(urlInfo)}");
            Console.WriteLine($"License Rating: {Grader.GetLicenseScore(urlInfo, LicenseList)}");
            Console.WriteLine($"Pull Requests Rating: {Grader.GetPullRequestsScore(urlInfo)}");
            Console.WriteLine($"Net Rating: {Grader.GetNetScore(urlInfo)}");

            Console.WriteLine("Net score is over 0.5? : " + (Grader.GetNetScore(urlInfo) > 0.5));
            //fail it if it is a url and net score is less than 0.5
            if(flagBodyUrlEmpty == false && Grader.GetNetScore(urlInfo) < 0.5)
            {
                Response.Headers.Add("X-Debug", "Net score is less than 0.5");
                Console.WriteLine("(/package/X-Debug) Net score is less than 0.5");
                return StatusCode(424);
            }
            string ratequery = $"INSERT INTO `package-registry-461.packages.package-ratings` (metaid, busfactor, correctness, rampup, responsive, licensescore, license, goodpin, pullreq, netscore) VALUES ('{ID}', {Grader.GetBusFactorScore(urlInfo)}, {Grader.GetCorrectnessScore(urlInfo)}, {Grader.GetRampupTimeScore(urlInfo)}, {Grader.GetResponseMaintainerScore(urlInfo)}, {Grader.GetLicenseScore(urlInfo, LicenseList)}, '{urlInfo.license}', {Grader.GetDependencyScore(urlInfo)}, {Grader.GetPullRequestsScore(urlInfo)}, {Grader.GetNetScore(urlInfo)})";
            Console.WriteLine("Line 619 " + ratequery);
            factory.SetQuery(ratequery);
            result = factory.ExecuteQuery();


            //check if package exists 
            string query = $"SELECT * FROM `package-registry-461.packages.packagesMetadata` WHERE name = '{Name}' AND version = '{ver.ToString()}'";
            Console.WriteLine("checkifexistspkgquery " + query);
            factory.SetQuery(query);
            result = factory.ExecuteQuery();
            if (result == null)
            {
                Response.Headers.Add("X-Debug", "Package already exists (null)");
                return StatusCode(409);
            }
            if (result.TotalRows > 0)
            {
                Response.Headers.Add("X-Debug", "Package already exists");
                return StatusCode(409);
            }

            //Add to metadata table
            query = $"INSERT INTO `package-registry-461.packages.packagesMetadata` (id, name, version) VALUES ('{ID}', '{Name}', '{ver.ToString()}')";
            Console.WriteLine("Line 890" + query);
            factory.SetQuery(query);
            result = factory.ExecuteQuery();
            //Add to package table


            query = @$"INSERT INTO `package-registry-461.packages.packagesData` (content, jsprogram, url, metaid, name) VALUES (@pkgcontent, '{body.JSProgram.Replace("\n", "@").Replace("'", "$")}', '{URL}', '{ID}', '{Name}')";
            Console.WriteLine("Length of content: " + body.Content.Length);
            var parameters = new BigQueryParameter[]
        {
            new BigQueryParameter("pkgcontent", BigQueryDbType.String, body.Content)
        };
            var credentials = GoogleCredential.GetApplicationDefault();
            var client = BigQueryClient.Create("package-registry-461", credentials);
            var job = client.CreateQueryJob(
                sql: query,
                parameters: parameters,
                options: new QueryOptions { UseQueryCache = false });
            // Wait for the job to complete.
            job = job.PollUntilCompleted().ThrowOnAnyError();

            result = client.GetQueryResults(job.Reference);
            //Add to History table
            try
            {
                query = $"INSERT INTO `package-registry-461.packages.packagesHistory` (action, date, user_isadmin, user_name, packagemetadata_id, packagemetadata_name, packagemetadata_version) VALUES ('POST', DATETIME(CURRENT_TIMESTAMP()), {authenticator.getAdmin()}, '{authenticator.getUsername()}', '{ID}', '{Name}', '{ver.ToString()}')";
                factory.SetQuery(query);
                result = factory.ExecuteQuery();
                Console.WriteLine("Line 904");
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-DebugQuery", "Query failed: Result: " + result.ToString() + "error" + e.ToString());
                return StatusCode(400);
            }

            //Delete the Package
            if (Directory.Exists("/app/TempDirectory"))
            {
                Directory.Delete("/app/TempDirectory", true);
            }
            FileInfo fileInfo = new FileInfo("/app/TempPackage.zip");
            if (fileInfo.Exists)
            {
                fileInfo.Delete();
            }

            Console.WriteLine("Sucessfully added package to database");

            Package pkg = new Package();
            PackageMetadata pkgmeta = new PackageMetadata();
            pkgmeta.ID = ID;
            pkgmeta.Name = Name;
            pkgmeta.Version = ver.ToString();
            pkg.Metadata = pkgmeta;
            PackageData pkgdata = new PackageData();
            pkgdata.Content = body.Content;
            pkgdata.JSProgram = body.JSProgram;
            pkgdata.URL = URL;
            pkg.Data = pkgdata;

            return StatusCode(201, pkg);
        }

        /// <summary>
        /// Delete this version of the package.
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="id">Package ID</param>
        /// <response code="200">Package is deleted.</response>
        /// <response code="400">There is missing field(s) in the PackageID/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="404">Package does not exist.</response>
        [HttpDelete]
        [Route("/package/{id}")]
        [ValidateModelState]
        [SwaggerOperation("PackageDelete")]
        public virtual IActionResult PackageDelete([FromHeader(Name = "X-Authorization")][Required()] string xAuthorization, [FromRoute][Required] string id)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            int runid = new Random().Next(1000, 2000);
            if (id != null && xAuthorization != null)
            {
                Console.WriteLine($"(PackageDelete/{runid}) Received request with args: " + xAuthorization + ", " + id);
                Response.Headers.Add("X-DebugAutograder", $"(PackageDelete/{runid}) Received request with args: " + xAuthorization + ", " + id);
            }
            Console.WriteLine("------END DEBUG INFO-----");

            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");

            string token = xAuthorization;

            //Sanitize Inputs
            if (!Sanitizer.VerifyTokenSanitized(token))
            {
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                Console.WriteLine("(/package/{id}/X-Debug) Token is not sanitized");
                return StatusCode(400);
            }

            //verify guid
            bool isGuid = Guid.TryParse(id, out Guid guid);
            if (!isGuid)
            {
                Response.Headers.Add("X-Debug", "ID is not valid GUID");
                Console.WriteLine("(/package/{id}/X-Debug) ID is not valid GUID");
                return StatusCode(400);
            }

            //Check Token Permissions
            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);

            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN)
            {
                Response.Headers.Add("X-Debug", "User has no perms");
                Console.WriteLine("(/package/{id}/X-Debug) User has no perms");
                return StatusCode(400);
            }

            //Decrement Token uses
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Response.Headers.Add("X-Debug", "Token decrement failed");
                Console.WriteLine("(/package/{id}/X-Debug) Token decrement failed");
                return StatusCode(400);
            }

            if (id == null)
            {
                Response.Headers.Add("X-Debug", "ID is null");
                Console.WriteLine("(/package/{id}/X-Debug) ID is null");
                return StatusCode(400);
            }


            try
            {
                Response.Headers.Add("X-DebugUser", "User: " + authenticator.getUsername() + " Admin: " + authenticator.getAdmin());
                Console.WriteLine("(/package/{id}/X-Debug) User: " + authenticator.getUsername() + " Admin: " + authenticator.getAdmin());
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-DebugUser", "User: " + "null" + " Admin: " + "null" + "error" + e.ToString());
                Console.WriteLine("(/package/{id}/X-Debug) User: " + "null" + " Admin: " + "null" + "error" + e.ToString());
            }

            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults result = null;
            string query = $"SELECT * FROM `package-registry-461.packages.packagesMetadata` WHERE id='{id}' ORDER BY version DESC LIMIT 1";
            factory.SetQuery(query);
            try
            {
                //Response.Headers.Add("X-Debugquery", "query: " + query);
                result = factory.ExecuteQuery();
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-Debug", "Query failed" + "error" + e.ToString());
                Console.WriteLine("(/package/{id}/X-Debug) Query failed" + "error" + e.ToString());
                return StatusCode(400);
            }


            //get metadata for package, most recent version
            if (result == null)
            {
                Response.Headers.Add("X-Debug", "Query failed");
                Console.WriteLine("(/package/{id}/X-Debug) Query failed");
                return StatusCode(400);
            }
            if (result.TotalRows == 0)
            {
                Response.Headers.Add("X-Debug", "Package does not exist");
                Console.WriteLine("(/package/{id}/X-Debug) Package does not exist");
                return StatusCode(404);
            }

            PackageMetadata metadata = new PackageMetadata();
            try
            {

                foreach (BigQueryRow row in result)
                {
                    //Name
                    if (row["name"] != null)
                    {
                        metadata.Name = row["name"].ToString();
                    }
                    else
                    {
                        metadata.Name = "invalid";
                    }

                    //Version
                    if (row["version"] != null)
                    {
                        metadata.Version = row["version"].ToString();
                    }
                    else
                    {
                        metadata.Version = "invalid";
                    }

                    //ID
                    if (row["id"] != null)
                    {
                        metadata.ID = row["id"].ToString();
                    }
                    else
                    {
                        metadata.ID = "invalid";
                    }

                }

                Response.Headers.Add("X-DebugStatus", "Metadata: " + metadata.Name + " " + metadata.Version + " " + metadata.ID);
                Console.WriteLine("(/package/{id}/X-Debug) Metadata: " + metadata.Name + " " + metadata.Version + " " + metadata.ID);
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-DebugStatus", "Metadata: " + "invalid" + "error" + e.ToString());
                Console.WriteLine("(/package/{id}/X-Debug) Metadata: " + "invalid" + "error" + e.ToString());
                return StatusCode(400);
            }



            //--------------------Add to History Query------------------------------------

            try
            {
                query = $"INSERT INTO `package-registry-461.packages.packagesHistory` (action, date, user_isadmin, user_name, packagemetadata_id, packagemetadata_name, packagemetadata_version) VALUES ('DELETE', DATETIME(CURRENT_TIMESTAMP()), true, '{authenticator.getUsername()}', '{metadata.ID}', '{metadata.Name}', '{metadata.Version}')";
                factory.SetQuery(query);
                result = factory.ExecuteQuery();
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-DebugQuery", "Query failed: Result: " + result.ToString() + "error" + e.ToString());
                return StatusCode(400);
            }

            //-----------------------Delete from Meta Data Query------------------------------------
            query = $"DELETE `package-registry-461.packages.packagesMetadata` entry WHERE entry.id IN (SELECT id from `package-registry-461.packages.packagesMetadata` WHERE id = '{id}' LIMIT 1)";
            factory.SetQuery(query);
            result = factory.ExecuteQuery();

            //--------------------Delete from Packages Data Query------------------------------------
            query = $"DELETE `package-registry-461.packages.packagesData` entry WHERE entry.metaid IN (SELECT metaid from `package-registry-461.packages.packagesData` WHERE metaid = '{id}' LIMIT 1)";
            factory.SetQuery(query);
            result = factory.ExecuteQuery();
            //--------------------Delete from cloud store------------------------------------

            return StatusCode(200);

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="xAuthorization"></param>
        /// <response code="200">Return the rating. Only use this if each metric was computed successfully.</response>
        /// <response code="400">There is missing field(s) in the PackageID/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="404">Package does not exist.</response>
        /// <response code="500">The package rating system choked on at least one of the metrics.</response>
        [HttpGet]
        [Route("/package/{id}/rate")]
        [ValidateModelState]
        [SwaggerOperation("PackageRate")]
        [SwaggerResponse(statusCode: 200, type: typeof(PackageRating), description: "Return the rating. Only use this if each metric was computed successfully.")]
        public virtual IActionResult PackageRate([FromRoute][Required] string id, [FromHeader(Name = "X-Authorization")][Required()] string xAuthorization)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            int runid = new Random().Next(1000, 2000);
            if (xAuthorization != null && id != null)
            {
                Console.WriteLine("(PackageRate) RunID: " + runid + " (GET) /package/{id}/rate) Received request with args: " + xAuthorization + ", " + id);
                Response.Headers.Add("X-DebugAutograder", "(PackageRate)RunID: " + runid + " (GET) /package/{id}/rate) Received request with args: " + xAuthorization + ", " + id);
            }

            Console.WriteLine("------END DEBUG INFO-----");

            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");

            //VERIFY TOKEN
            if (xAuthorization == null)
            {
                Response.Headers.Add("X-Debug", "Token is null");
                Console.WriteLine("(/package/{id}/rate/X-Debug) Token is null");
                return StatusCode(400);
            }
            string token = xAuthorization;
            bool isSantized = Sanitizer.VerifyTokenSanitized(token);
            if (!isSantized)
            {
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                Console.WriteLine("(/package/{id}/rate/X-Debug) Token is not sanitized");
                return StatusCode(400);
            }

            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);
            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN && UserStatus != TokenAuthenticator.AuthResults.SUCCESS_USER)
            {
                //append debug message to header
                Response.Headers.Add("X-Debug", "Token is invalid");
                Console.WriteLine("(/package/{id}/rate/X-Debug) Token is invalid");
                return StatusCode(400);
            }

            //decrement token
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Response.Headers.Add("X-Debug", "Token decrement failed");
                Console.WriteLine("(/package/{id}/rate/X-Debug) Token decrement failed");
                return StatusCode(400);
            }

            if (id == null)
            {
                Response.Headers.Add("X-Debug", "PackageID is null");
                Console.WriteLine("(/package/{id}/rate/X-Debug) PackageID is null");
                return StatusCode(400);
            }

            if (id == "" || id == null)
            {
                Response.Headers.Add("X-Debug", "PackageID is empty");
                Console.WriteLine("(/package/{id}/rate/X-Debug) PackageID is empty");
                return StatusCode(400);
            }

            bool isidguid = Guid.TryParse(id, out Guid guid);
            if (!isidguid)
            {
                Response.Headers.Add("X-Debug", "PackageID is not a guid");
                Console.WriteLine("(/package/{id}/rate/X-Debug) PackageID is not a guid");
                return StatusCode(400);
            }

            //Check if the package exist 

            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults result = null;
            string query = $"SELECT * FROM `package-registry-461.packages.package-ratings` WHERE metaid = '{id}' LIMIT 1";


            factory.SetQuery(query);
            result = factory.ExecuteQuery();

            if (result.TotalRows == 0)
            {
                Response.Headers.Add("X-Debug", "Package does not exist");
                return StatusCode(404);
            }
            if (result == null)
            {
                Response.Headers.Add("X-Debug", "Package does not exist");
                return StatusCode(404);
            }
            PackageRating rating = new PackageRating();

            foreach (BigQueryRow row in result)
            {
                if (row["busfactor"] != null)
                {
                    rating.BusFactor = double.Parse(row["busfactor"].ToString());
                }
                else
                {
                    rating.BusFactor = 0;
                }

                if (row["correctness"] != null)
                {
                    rating.Correctness = double.Parse(row["correctness"].ToString());
                }
                else
                {
                    rating.Correctness = 0;
                }

                if (row["rampup"] != null)
                {
                    rating.RampUp = double.Parse(row["rampup"].ToString());
                }
                else
                {
                    rating.RampUp = 0;
                }

                if (row["responsive"] != null)
                {
                    rating.ResponsiveMaintainer = double.Parse(row["responsive"].ToString());
                }
                else
                {
                    rating.ResponsiveMaintainer = 0;
                }

                if (row["licensescore"] != null)
                {
                    rating.LicenseScore = double.Parse(row["licensescore"].ToString());
                }
                else
                {
                    rating.LicenseScore = 0;
                }

                if (row["goodpin"] != null)
                {
                    rating.GoodPinningPractice = double.Parse(row["goodpin"].ToString());
                }
                else
                {
                    rating.GoodPinningPractice = 0;
                }

                if (row["pullreq"] != null)
                {
                    rating.PullRequest = double.Parse(row["pullreq"].ToString());
                }
                else
                {
                    rating.PullRequest = 0;
                }

                if (row["netscore"] != null)
                {
                    rating.NetScore = double.Parse(row["netscore"].ToString());
                }
                else
                {
                    rating.NetScore = 0;
                }

            }


            //Download the Package
            //Perform 
            //Grade the Package

            Response.Headers.Add("X-Debug", "Token is valid --- " + id);
            Console.WriteLine("(/package/{id}/rate/X-Debug) Token is valid --- " + id);


            return StatusCode(200, rating);
        }

        /// <summary>
        /// Interact with the package with this ID
        /// </summary>
        /// <remarks>Return this package.</remarks>
        /// <param name="xAuthorization"></param>
        /// <param name="id">ID of package to fetch</param>
        /// <response code="200">Return the package.</response>
        /// <response code="400">There is missing field(s) in the PackageID/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="404">Package does not exist.</response>
        /// <response code="0">unexpected error</response>
        [HttpGet]
        [Route("/package/{id}")]
        [ValidateModelState]
        [SwaggerOperation("PackageRetrieve")]
        [SwaggerResponse(statusCode: 200, type: typeof(Package), description: "Return the package.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult PackageRetrieve([FromHeader(Name = "X-Authorization")][Required()] string xAuthorization, [FromRoute][Required] string id)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            int runid = new Random().Next(1000, 2000);
            if (xAuthorization != null && id != null)
            {
                Console.WriteLine("(PackageRetrieve) RunID: " + runid + " (GET) /package/{id}) Received request with args: " + xAuthorization + ", " + id);
                Response.Headers.Add("X-DebugAutograder", "(PackageRetrieve)RunID: " + runid + " (GET) /package/{id}) Received request with args: " + xAuthorization + ", " + id);
            }

            Console.WriteLine("------END DEBUG INFO-----");

            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");

            string token = xAuthorization;
            //Validate token
            bool isSanitized = Sanitizer.VerifyTokenSanitized(token);
            if (!isSanitized)
            {
                //append debug message to header
                Console.WriteLine("(/package/{id}/X-Debug) Token is not sanitized");
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                return StatusCode(400);
            }
            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);
            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_USER && UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN)
            {
                //append debug message to header
                Console.WriteLine("(/package/{id}/X-Debug) Token is invalid");
                Response.Headers.Add("X-Debug", "Token is invalid");
                return StatusCode(400);
            }

            //decrement token
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Console.WriteLine("(reset/X-Debug) Token decrement failed");
                Response.Headers.Add("X-Debug", "Token decrement failed");
                return StatusCode(400);
            }

            //End token validation

            if (id == null)
            {
                Console.WriteLine("(/package/{id}/X-Debug) PackageID is null");
                Response.Headers.Add("X-Debug", "PackageID is null");
                return StatusCode(400);
            }

            //Get metadata for package, most recent version

            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults results = null;
            string query = $"SELECT * FROM `package-registry-461.packages.packagesMetadata` WHERE id='{id}' ORDER BY version DESC LIMIT 1";
            factory.SetQuery(query);
            try
            {
                //Response.Headers.Add("X-Debugquery", "query: " + query);
                results = factory.ExecuteQuery();
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-Debug", "Query failed" + "error" + e.ToString());
                Console.WriteLine("(/package/{id}/X-Debug) Query failed" + "error" + e.ToString());
                return StatusCode(400);
            }


            //get metadata for package, most recent version
            if (results == null)
            {
                Response.Headers.Add("X-Debug", "Query failed");
                Console.WriteLine("(/package/{id}/X-Debug) Query failed");
                return StatusCode(400);
            }
            if (results.TotalRows == 0)
            {
                Response.Headers.Add("X-Debug", "Package does not exist");
                Console.WriteLine("(/package/{id}/X-Debug) Package does not exist");
                return StatusCode(404);
            }

            PackageMetadata metadata = new PackageMetadata();
            try
            {

                foreach (BigQueryRow row in results)
                {
                    //Name
                    if (row["name"] != null)
                    {
                        metadata.Name = row["name"].ToString();
                    }
                    else
                    {
                        metadata.Name = "invalid";
                    }

                    //Version
                    if (row["version"] != null)
                    {
                        metadata.Version = row["version"].ToString();
                    }
                    else
                    {
                        metadata.Version = "invalid";
                    }

                    //ID
                    if (row["id"] != null)
                    {
                        metadata.ID = row["id"].ToString();
                    }
                    else
                    {
                        metadata.ID = "invalid";
                    }

                }

                Response.Headers.Add("X-DebugStatus", "Metadata: " + metadata.Name + " " + metadata.Version + " " + metadata.ID);
                Console.WriteLine("(/package/{id}/X-Debug) Metadata: " + metadata.Name + " " + metadata.Version + " " + metadata.ID);
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-DebugStatus", "Metadata: " + "invalid" + "error" + e.ToString());
                Console.WriteLine("(/package/{id}/X-Debug) Metadata: " + "invalid" + "error" + e.ToString());
                return StatusCode(400);
            }

            //call get package data using id
            query = $"SELECT * FROM `package-registry-461.packages.packagesData` WHERE metaid='{id}' LIMIT 1";
            factory.SetQuery(query);
            try
            {
                Response.Headers.Add("X-Debugquery", "query: " + query);
                results = factory.ExecuteQuery();
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-Debug", "Query failed" + "error" + e.ToString());
                Console.WriteLine("(/package/{id}/X-Debug) Query failed" + "error" + e.ToString());
                return StatusCode(400);
            }
            if (results == null)
            {
                Response.Headers.Add("X-Debug", "Query failed");
                Console.WriteLine("(/package/{id}/X-Debug) Query failed");
                return StatusCode(400);
            }
            if (results.TotalRows == 0)
            {
                Response.Headers.Add("X-Debug", "Package does not exist");
                Console.WriteLine("(/package/{id}/X-Debug) Package does not exist");
                return StatusCode(404);
            }
            Response.Headers.Add("X-DebugStatus3", "Length: " + results.TotalRows.ToString());

            PackageData data = new PackageData();
            try
            {

                foreach (BigQueryRow row in results)
                {
                    //Content
                    if (row["content"] != null)
                    {
                        data.Content = row["content"].ToString().Replace("@", "\n");
                    }
                    else
                    {
                        data.Content = "invalid";
                    }

                    //JSProgram
                    if (row["jsprogram"] != null)
                    {
                        data.JSProgram = row["jsprogram"].ToString();
                    }
                    else
                    {
                        data.JSProgram = "invalid";
                    }

                    //URL
                    if (row["url"] != null)
                    {
                        data.URL = row["url"].ToString();
                    }
                    else
                    {
                        data.URL = "invalid";
                    }

                }
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-DebugStatus2", "Data: " + "invalid" + "error" + e.ToString().Replace("\n", "").Replace("\r", "").Replace("\t", ""));
                Console.WriteLine("(/package/{id}/X-DebugStatus2) Data: " + "invalid" + "error" + e.ToString().Replace("\n", "").Replace("\r", "").Replace("\t", ""));
                return StatusCode(400);
            }

            //returns package with 200
            Package package = new Package();
            package.Metadata = metadata;
            package.Data = data;
            return StatusCode(200, package);
        }

        /// <summary>
        /// Update this content of the package.
        /// </summary>
        /// <remarks>The name, version, and ID must match.  The package contents (from PackageData) will replace the previous contents.</remarks>
        /// <param name="body"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="id"></param>
        /// <response code="200">Version is updated.</response>
        /// <response code="400">There is missing field(s) in the PackageID/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="404">Package does not exist.</response>
        [HttpPut]
        [Route("/package/{id}")]
        [ValidateModelState]
        [SwaggerOperation("PackageUpdate")]
        public virtual IActionResult PackageUpdate([FromBody] Package body, [FromHeader][Required()] string xAuthorization, [FromRoute][Required] string id)
        {
            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");

            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            int runid = new Random().Next(1000, 2000);
            if (xAuthorization != null && body != null && id != null)
            {
                Console.WriteLine($"PackageUpdate/{runid}: Received request with args: {xAuthorization}, {id}, {body.Metadata.ID}, {body.Metadata.Name}, {body.Metadata.Version}, {(body.Data.Content.Length > 100 ? body.Data.Content.Substring(0, 100) : body.Data.Content)}, {body.Data.URL}");
                Response.Headers.Add("X-DebugAutograder", $"((PUT) /package/{{id}}) Received request with args: {xAuthorization}, {id}, {body.Metadata.ID}, {body.Metadata.Name}, {body.Metadata.Version}, {(body.Data.Content.Length > 100 ? body.Data.Content.Substring(0, 100) : body.Data.Content)}, {body.Data.URL}");
            }
            Console.WriteLine("------END DEBUG INFO-----");

            if (xAuthorization == null || body == null || id == null)
            {
                //append debug message to header
                Console.WriteLine("(/package/{id}/X-Debug) Missing field(s) in the PackageID/AuthenticationToken");
                Response.Headers.Add("X-Debug", "Missing field(s) in the PackageID/AuthenticationToken");
                return StatusCode(400);
            }
            if (body.Data == null || body.Metadata == null)
            {
                //append debug message to header
                Console.WriteLine("(/package/{id}/X-Debug) Missing field(s) in the PackageID/AuthenticationToken");
                Response.Headers.Add("X-Debug", "Missing field(s) in the PackageID/AuthenticationToken");
                return StatusCode(400);
            }
            if (body.Data.Content == null || body.Data.URL == null || body.Metadata.ID == null || body.Metadata.Name == null || body.Metadata.Version == null)
            {
                //append debug message to header
                Console.WriteLine("(/package/{id}/X-Debug) Missing field(s) in the PackageID/AuthenticationToken");
                Response.Headers.Add("X-Debug", "Missing field(s) in the PackageID/AuthenticationToken");
                return StatusCode(400);
            }
            string token = xAuthorization;
            //Validate token
            bool isSanitized = Sanitizer.VerifyTokenSanitized(token);
            if (!isSanitized)
            {
                //append debug message to header
                Console.WriteLine("(/package/{id}/X-Debug) Token is not sanitized");
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                return StatusCode(400);
            }
            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);
            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_USER && UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN)
            {
                //append debug message to header
                Console.WriteLine("(/package/{id}/X-Debug) Token is invalid");
                Response.Headers.Add("X-Debug", "Token is invalid");
                return StatusCode(400);
            }

            //decrement token
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Console.WriteLine("(reset/X-Debug) Token decrement failed");
                Response.Headers.Add("X-Debug", "Token decrement failed");
                return StatusCode(400);
            }

            //check id from path and body are the same
            if (id != body.Metadata.ID)
            {
                Console.WriteLine("(/package/{id}/X-Debug) ID from path and body are not the same");
                Response.Headers.Add("X-Debug", "ID from path and body are not the same");
                return StatusCode(400);
            }


            //check if package exists
            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults results = null;

            try
            {
                string query = $"SELECT * FROM `package-registry-461.packages.packagesMetadata` WHERE id = {body.Metadata.ID} AND name = '{body.Metadata.Name}' AND version = '{body.Metadata.Version}'";
                factory.SetQuery(query);
                results = factory.ExecuteQuery();
            }
            catch (Exception e)
            {
                Console.WriteLine("(/package/{id}/X-Debug) Query failed: " + e.ToString().Replace("\n", "").Replace("\r", "").Replace("\t", ""));
                Response.Headers.Add("X-Debug", "Query failed: " + e.ToString().Replace("\n", "").Replace("\r", "").Replace("\t", ""));
                return StatusCode(400);
            }
            if (results == null)
            {
                Console.WriteLine("(/package/{id}/X-Debug) Query failed");
                Response.Headers.Add("X-Debug", "Query failed");
                return StatusCode(400);
            }
            if (results.TotalRows == 0)
            {
                Console.WriteLine("(/package/{id}/X-Debug) Package does not exist");
                Response.Headers.Add("X-Debug", "Package does not exist");
                return StatusCode(404);
            }

            //update package
            try
            {
                string query = $"UPDATE `package-registry-461.packages.packagesData` SET content = '{body.Data.Content}', url = '{body.Data.URL}' WHERE id = {body.Metadata.ID} AND name = '{body.Metadata.Name}' AND version = '{body.Metadata.Version}'";
                factory.SetQuery(query);
                results = factory.ExecuteQuery();
            }
            catch (Exception e)
            {
                Console.WriteLine("(/package/{id}/X-Debug) Query failed: " + e.ToString().Replace("\n", "").Replace("\r", "").Replace("\t", ""));
                Response.Headers.Add("X-Debug", "Query failed: " + e.ToString().Replace("\n", "").Replace("\r", "").Replace("\t", ""));
                return StatusCode(400);
            }

            return StatusCode(200);
        }

        /// <summary>
        /// Get the packages from the registry.
        /// </summary>
        /// <remarks>Get any packages fitting the query. Search for packages satisfying the indicated query.  If you want to enumerate all packages, provide an array with a single PackageQuery whose name is \&quot;*\&quot;.  The response is paginated; the response header includes the offset to use in the next query.</remarks>
        /// <param name="body"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="offset">Provide this for pagination. If not provided, returns the first page of results.</param>
        /// <response code="200">List of packages</response>
        /// <response code="400">There is missing field(s) in the PackageQuery/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="413">Too many packages returned.</response>
        /// <response code="0">unexpected error</response>
        [HttpPost]
        [Route("/packages")]
        [ValidateModelState]
        [SwaggerOperation("PackagesList")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PackageMetadata>), description: "List of packages")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult PackagesList([FromBody] List<PackageQuery> body, [FromHeader(Name = "X-Authorization")][Required()] string xAuthorization, [FromQuery] string offset)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            int runid = new Random().Next(1000, 2000);
            if (offset == null)
            {
                offset = "0";
            }
            if (xAuthorization != null && body != null && offset != null)
            {
                Console.WriteLine($"(PackagesList) RunID: {runid} (X-Authorization: {xAuthorization}, offset: {offset}, body: {body[0].Name}, {body[0].Version})");
                Response.Headers.Add("X-DebugAutograder", $"(PackagesList) RunID: {runid} (X-Authorization: {xAuthorization}, offset: {offset}, body: {body[0].Name}, {body[0].Version})");
            }
            Console.WriteLine("------END DEBUG INFO-----");


            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");

            if (xAuthorization == null || body == null)
            {
                Console.WriteLine("(/packages/X-Debug) Missing field(s) in the PackageQuery/AuthenticationToken or it is formed improperly");
                Response.Headers.Add("X-Debug", "Missing field(s) in the PackageQuery/AuthenticationToken or it is formed improperly");
                return StatusCode(400);
            }
            if (body.Count == 0)
            {
                Console.WriteLine("(/packages/X-Debug) No PackageQuery objects in body");
                Response.Headers.Add("X-Debug", "No PackageQuery objects in body");
                return StatusCode(400);
            }
            if (body.Count > 100)
            {
                Console.WriteLine("(/packages/X-Debug) Too many PackageQuery objects in body");
                Response.Headers.Add("X-Debug", "Too many PackageQuery objects in body");
                return StatusCode(400);
            }

            //VERIFY TOKEN
            string token = xAuthorization;
            bool isSantized = Sanitizer.VerifyTokenSanitized(token);
            if (!isSantized)
            {
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                Console.WriteLine("(packages/X-Debug) Token is not sanitized");
                return StatusCode(400);
            }

            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);
            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN && UserStatus != TokenAuthenticator.AuthResults.SUCCESS_USER)
            {
                //append debug message to header
                Response.Headers.Add("X-Debug", "Token is invalid");
                Console.WriteLine("(packages/X-Debug) Token is invalid");
                return StatusCode(400);
            }

            //decrement token
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Response.Headers.Add("X-Debug", "Token decrement failed");
                Console.WriteLine("(packages/X-Debug) Token decrement failed");
                return StatusCode(400);
            }

            //-----------------END TOKEN VERIFICATION-----------------//

            //get offset
            int offsetInt = 0;
            try
            {
                int.TryParse(offset, out offsetInt);
            }
            catch (Exception _)
            {
                offsetInt = 0;
            }

            //create bigquery factory
            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults result = null;

            //query for packages
            List<BigQueryResults> results = new List<BigQueryResults>();
            foreach (PackageQuery queryobj in body)
            {

                //determine if query is invalid (both null)
                if ((queryobj.Name == null || queryobj.Name == "") && (queryobj.Version == null || queryobj.Version == ""))
                {
                    Response.Headers.Add("X-Debug", "Both name and version are null");
                    Console.WriteLine("(packages/X-Debug) Token decrement failed");
                    return StatusCode(400);
                }

                if (queryobj.Name == null || queryobj.Name == "" || queryobj.Name == "*")
                {
                    queryobj.Name = ".*";
                }
                else
                {
                    //sanitize name
                    queryobj.Name = Sanitizer.SantizeRegex(queryobj.Name);
                }


                string verregex = ".*";
                if (queryobj.Version == null || queryobj.Version == "" || queryobj.Version == "*")
                {
                    queryobj.Version = ".*";
                    verregex = ".*";
                }
                else
                {
                    Version ver = new Version(queryobj.Version);
                    verregex = ver.ToRegexString();
                    queryobj.Version = verregex;
                }

                //search matching metadata
                string query = $"SELECT * FROM `package-registry-461.packages.packagesMetadata` WHERE REGEXP_CONTAINS(name, '{queryobj.Name}') AND REGEXP_CONTAINS(version, '{verregex}') LIMIT 101 OFFSET {offsetInt}";
                Response.Headers.Add("X-Debugquery1", query);
                Console.WriteLine("(packages/X-Debugquery1) " + query);

                factory.SetQuery(query);
                result = factory.ExecuteQuery();

                results.Add(result);
                if (result.TotalRows > 100)
                {
                    //too many packages
                    Response.Headers.Add("X-Debug", "Too many packages returned");
                    Console.WriteLine("(packages/X-Debug) Too many packages returned");
                    return StatusCode(413);
                }
            }
            Response.Headers.Add("X-DebugTag1", "Tag1");
            Console.WriteLine("(packages/X-DebugTag1) Tag1");
            List<PackageMetadata> metadataList = new List<PackageMetadata>();
            //get a list of metadata from the results
            for (int i = 0; i < results.Count; i++)
            {
                result = results[i];
                foreach (BigQueryRow row in result)
                {
                    PackageMetadata metadata = new PackageMetadata();
                    metadata.Name = row["name"].ToString();
                    metadata.Version = row["version"].ToString();
                    metadata.ID = row["id"].ToString();
                    metadataList.Add(metadata);
                }
            }
            Response.Headers.Add("X-DebugTag2", "metadataList.Count: " + metadataList.Count);
            Console.WriteLine("(packages/X-DebugTag2) metadataList.Count: " + metadataList.Count);

            //format response
            //[
            //{
            //"Version": "1.2.3",
            //"Name": "Underscore"
            //}, ]

            string response = "[";
            for (int i = 0; i < metadataList.Count; i++)
            {
                PackageMetadata metadata = metadataList[i];
                response += "{\n";
                response += $"\"Version\": \"{metadata.Version}\",\n";
                response += $"\"Name\": \"{metadata.Name}\",\n";
                response += $"\"ID\": \"{metadata.ID}\"\n";
                response += "}";
                if (i != metadataList.Count - 1)
                {
                    response += ", ";
                }
            }
            response += "]";
            return StatusCode(200, response);

        }

        /// <summary>
        /// Reset the registry
        /// </summary>
        /// <remarks>Reset the registry to a system default state.</remarks>
        /// <param name="xAuthorization"></param>
        /// <response code="200">Registry is reset.</response>
        /// <response code="400">There is missing field(s) in the AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="401">You do not have permission to reset the registry.</response>
        [HttpDelete]
        [Route("/reset")]
        [ValidateModelState]
        [SwaggerOperation("RegistryReset")]
        public virtual IActionResult RegistryReset([FromHeader(Name = "X-Authorization")][Required()] string xAuthorization)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            int runid = new Random().Next(1000, 2000);
            if (xAuthorization != null)
            {
                Console.WriteLine($"(reset/X-Debug) RunID: {runid} Token: {xAuthorization}");
                Response.Headers.Add("X-Debug", $"RunID: {runid} Token: {xAuthorization}");
            }
            Console.WriteLine("------END DEBUG INFO-----");



            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");

            if (xAuthorization == null)
            {
                Console.WriteLine("(reset/X-Debug) Token is null");
                Response.Headers.Add("X-Debug", "Token is null");
                return StatusCode(400);
            }

            //use this for testing.
            string token = xAuthorization;
            bool isSantized = Sanitizer.VerifyTokenSanitized(token);
            if (!isSantized)
            {
                Console.WriteLine("(reset/X-Debug) Token is not sanitized");
                Response.Headers.Add("X-Debug", "Token is not sanitized + " + token);
                return StatusCode(400);
            }
            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);
            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN)
            {
                //append debug message to header
                Console.WriteLine("(reset/X-Debug) Token is invalid");
                Response.Headers.Add("X-Debug", "Token is invalid");
                return StatusCode(400);
            }

            //decrement token
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Console.WriteLine("(reset/X-Debug) Token decrement failed");
                Response.Headers.Add("X-Debug", "Token decrement failed");
                return StatusCode(400);
            }

            //get bigquery
            BigQueryFactory factory = new BigQueryFactory();
            var ghtoken = factory.GetGithubTokenStoredInBQ();
            Console.WriteLine("(reset/X-Debug) Registry reset + github token: " + ghtoken);
            Response.Headers.Add("X-Debug1", "Registry reset + github token: " + ghtoken);


            //make directory


            //var co = new CloneOptions();
            //co.CredentialsProvider = (_url, _user, _cred) =>
            //    new UsernamePasswordCredentials { Username = "KingRex212", Password = "3tH')>bGp]}D_S" };
            //
            //Repository.Clone("https://github.com/Rexwang8/fast-epubtotxt", "./test", co);
            //
            ////wait 2s
            //Thread.Sleep(2000);
            ////check if repo file exists
            //if (!System.IO.File.Exists("./test/README.md"))
            //{
            //    Response.Headers.Add("X-Debug", "Repo does not exist");
            //    return StatusCode(400);
            //}


            return StatusCode(200);



        }
    }
}
