/*
 * ECE 461 - Spring 2023 - Project 2
 *
 * API for ECE 461/Spring 2023/Project 2: A Trustworthy Module Registry
 *
 * OpenAPI spec version: 2.0.0
 * Contact: davisjam@purdue.edu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using IO.Swagger.Controllers;
using System.Security.Cryptography;
using Google.Apis.Auth.OAuth2;
using Google.Cloud.BigQuery.V2;
using Google.Apis.Bigquery.v2.Data;
using System.Text.RegularExpressions;
using Google.Cloud.SecretManager.V1;
using Google.Protobuf;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using System.Linq;
using IO.Swagger.CLI;
using LibGit2Sharp;
using System.Threading;
using System.IO;
using Microsoft.AspNetCore.Cors;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    {
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create an access token.</remarks>
        /// <param name="body"></param>
        /// <response code="200">Return an AuthenticationToken.</response>
        /// <response code="400">There is missing field(s) in the AuthenticationRequest or it is formed improperly.</response>
        /// <response code="401">The user or password is invalid.</response>
        /// <response code="501">This system does not support authentication.</response>
        [HttpPut]
        [Route("/authenticate")]
        [ValidateModelState]
        [SwaggerOperation("CreateAuthToken")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Return an AuthenticationToken.")]
        public virtual IActionResult CreateAuthToken([FromBody] AuthenticationRequest body)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            //generate runid
            int runid = new Random().Next(1000, 2000);
            Console.WriteLine($"(authenticate/{runid}) Received request to authenticate user: " + body.User.Name);
            Console.WriteLine("(authenticate/{runid})args: " + body.User.Name + " " + body.Secret.Password + " " + body.User.IsAdmin);
            Console.WriteLine("------END DEBUG INFO-----");
            Response.Headers.Add("X-DebugAutograder", $"/{runid}Received request to authenticate user: " + body.User.Name);
            Response.Headers.Add("X-DebugArgs", $"/{runid}args: " + body.User.Name + " " + body.Secret.Password + " " + body.User.IsAdmin);

            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");
            Response.Headers.Add("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE");

            string username = body.User.Name;
            bool? admin = body.User.IsAdmin;
            string password = body.Secret.Password;

            //check if any fields are null or empty
            if (username == null || password == null || username == "" || password == "" || admin == null)
            {
                Response.Headers.Add("X-Debug", "Missing field(s) in the AuthenticationRequest or it is formed improperly");
                Console.WriteLine("(authenticate/X-Debug) Missing field(s) in the AuthenticationRequest or it is formed improperly");
                return StatusCode(400);
            }

            //check if username or password is invalid
            if (username == "invalid" || password == "invalid")
            {
                Response.Headers.Add("X-Debug", "The user or password is invalid");
                Console.WriteLine("(authenticate/X-Debug) The user or password is invalid");
                return StatusCode(401);
            }


            //sanitize input
            string SanitizedUsername = Sanitizer.SanitizeString(username);
            string SanitizedPassword = Sanitizer.SanitizeString(password);

            TokenAuthenticator authenticator = new TokenAuthenticator();
            authenticator.setPassword(SanitizedPassword);
            authenticator.setUsername(SanitizedUsername);
            authenticator.setAdmin(admin);
            string token = authenticator.GenerateTokenFromCredentials();
            if (token == null)
            {
                Response.Headers.Add("X-Debug", "Credentials failed to generate token");
                Console.WriteLine("(authenticate/X-Debug) Credentials failed to generate token");
                return StatusCode(401);
            }
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateCredentials();
            if (UserStatus == TokenAuthenticator.AuthResults.NO_RESULTS)
            {
                //user does not exist, add user to database
                Response.Headers.Add("X-Debug", "User does not exist, adding user to database");
                Console.WriteLine("(authenticate/X-Debug) User does not exist, adding user to database");
                authenticator.AddUserToDatabaseIfNotExists(token);
            }
            else if (UserStatus == TokenAuthenticator.AuthResults.WRONG_PASSWORD || UserStatus == TokenAuthenticator.AuthResults.TOKEN_INVALID)
            {
                //wrong password, return error
                if (UserStatus == TokenAuthenticator.AuthResults.WRONG_PASSWORD)
                {
                    Response.Headers.Add("X-Debug", "Wrong password, returning error");
                    Console.WriteLine("(authenticate/X-Debug) Wrong password, returning error");
                }
                else if (UserStatus == TokenAuthenticator.AuthResults.TOKEN_INVALID)
                {
                    Response.Headers.Add("X-Debug", "Invalid token, returning error");
                    Console.WriteLine("(authenticate/X-Debug) Invalid token, returning error");
                }
                return StatusCode(401);
            }
            else if (UserStatus == TokenAuthenticator.AuthResults.TOKEN_OVERLIMIT || UserStatus == TokenAuthenticator.AuthResults.TOKEN_EXPIRED)
            {
                //Refresh token
                if (UserStatus == TokenAuthenticator.AuthResults.TOKEN_OVERLIMIT)
                {
                    Response.Headers.Add("X-Debug", "Token overlimit, refreshing token");
                    Console.WriteLine("(authenticate/X-Debug) Token overlimit, refreshing token");
                }
                else if (UserStatus == TokenAuthenticator.AuthResults.TOKEN_EXPIRED)
                {
                    Response.Headers.Add("X-Debug", "Token expired, refreshing token");
                    Console.WriteLine("(authenticate/X-Debug) Token expired, refreshing token");
                }
                authenticator.UpdateUserDateRefreshToken();
            }

            //add the token to the header of the response in the X-Authorization field
            Response.Headers.Add("X-Authorization", token);
            Console.WriteLine("(authenticate/X-Debug) Token: " + token);

            //set the token as the response body
            return new ObjectResult(token);
        }

        /// <summary>
        /// Delete all versions of this package.
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="name"></param>
        /// <response code="200">Package is deleted.</response>
        /// <response code="400">There is missing field(s) in the PackageName/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="404">Package does not exist.</response>
        [HttpDelete]
        [Route("/package/byName/{name}")]
        [ValidateModelState]
        [SwaggerOperation("PackageByNameDelete")]
        public virtual IActionResult PackageByNameDelete([FromHeader(Name = "X-Authorization")][Required()] string xAuthorization, [FromRoute][Required] string name)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            Console.WriteLine("(DELETE /package/byName/{name}/X-Debug) Received request to delete package: " + name);
            Console.WriteLine("(DELETE /package/byName/{name}/X-Debug) args: " + xAuthorization + ", " + name);
            Console.WriteLine("------END DEBUG INFO-----");
            Response.Headers.Add("X-DebugAutograder", "DELETE /package/byName/{name}/X-Debug");
            Response.Headers.Add("X-DebugArgs", "args: " + xAuthorization + ", " + name);

            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");
            string token = xAuthorization;

            //Sanitize Inputs
            if (!Sanitizer.VerifyTokenSanitized(token))
            {
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                Console.WriteLine("(/package/byName/{name}/X-Debug) Token is not sanitized");
                return StatusCode(400);
            }

            if (!Sanitizer.VerifyPackageNameSafe(name))
            {
                Response.Headers.Add("X-Debug", "Name is not sanitized");
                Console.WriteLine("(/package/byName/{name}/X-Debug) Name is not sanitized");
                return StatusCode(400);
            }

            //Check Token Permissions
            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);

            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN)
            {
                Response.Headers.Add("X-Debug", "User has no perms");
                Console.WriteLine("(/package/byName/{name}/X-Debug) User has no perms");
                return StatusCode(400);
            }

            //Decrement Token uses
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Response.Headers.Add("X-Debug", "Token decrement failed");
                Console.WriteLine("(/package/byName/{name}/X-Debug) Token decrement failed");
                return StatusCode(400);
            }


            try
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) User: " + authenticator.getUsername() + " Admin: " + authenticator.getAdmin());
                Response.Headers.Add("X-DebugUser", "User: " + authenticator.getUsername() + " Admin: " + authenticator.getAdmin());
            }
            catch (Exception e)
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) User: " + "null" + " Admin: " + "null" + "error" + e.ToString());
                Response.Headers.Add("X-DebugUser", "User: " + "null" + " Admin: " + "null" + "error" + e.ToString());
            }

            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults result = null;
            string query = $"SELECT * FROM `package-registry-461.packages.packagesMetadata` WHERE name='{name}' ORDER BY version DESC LIMIT 1";
            factory.SetQuery(query);
            try
            {
                //Response.Headers.Add("X-Debugquery", "query: " + query);
                result = factory.ExecuteQuery();
            }
            catch (Exception e)
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) Query failed" + "error" + e.ToString());
                Response.Headers.Add("X-Debug", "Query failed" + "error" + e.ToString());
                return StatusCode(400);
            }


            //get metadata for package, most recent version
            if (result == null)
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) Query failed");
                Response.Headers.Add("X-Debug", "Query failed");
                return StatusCode(400);
            }
            if (result.TotalRows == 0)
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) Package does not exist");
                Response.Headers.Add("X-Debug", "Package does not exist");
                return StatusCode(404);
            }

            PackageMetadata metadata = new PackageMetadata();
            try
            {

                foreach (BigQueryRow row in result)
                {
                    //Name
                    if (row["name"] != null)
                    {
                        metadata.Name = row["name"].ToString();
                    }
                    else
                    {
                        metadata.Name = "invalid";
                    }

                    //Version
                    if (row["version"] != null)
                    {
                        metadata.Version = row["version"].ToString();
                    }
                    else
                    {
                        metadata.Version = "invalid";
                    }

                    //ID
                    if (row["id"] != null)
                    {
                        metadata.ID = row["id"].ToString();
                    }
                    else
                    {
                        metadata.ID = "invalid";
                    }

                }
                Console.WriteLine("(/package/byName/{name}/X-Debug) Metadata: " + metadata.Name + " " + metadata.Version + " " + metadata.ID);
                Response.Headers.Add("X-DebugStatus", "Metadata: " + metadata.Name + " " + metadata.Version + " " + metadata.ID);
            }
            catch (Exception e)
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) Metadata: " + "invalid" + "error" + e.ToString());
                Response.Headers.Add("X-DebugStatus", "Metadata: " + "invalid" + "error" + e.ToString());
                return StatusCode(400);
            }



            //--------------------Add to History Query------------------------------------

            try
            {
                query = $"INSERT INTO `package-registry-461.packages.packagesHistory` (action, date, user_isadmin, user_name, packagemetadata_id, packagemetadata_name, packagemetadata_version) VALUES ('DELETE', DATETIME(CURRENT_TIMESTAMP()), true, '{authenticator.getUsername()}', '{metadata.ID}', '{metadata.Name}', '{metadata.Version}')";
                factory.SetQuery(query);
                result = factory.ExecuteQuery();
            }
            catch (Exception e)
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) Query failed: Result: " + result.ToString() + "error" + e.ToString());
                Response.Headers.Add("X-DebugQuery", "Query failed: Result: " + result.ToString() + "error" + e.ToString());
                return StatusCode(400);
            }

            //-----------------------Delete from Meta Data Query------------------------------------
            query = $"DELETE `package-registry-461.packages.packagesMetadata` entry WHERE entry.name IN (SELECT name from `package-registry-461.packages.packagesMetadata` WHERE name = '{name}' LIMIT 100)";
            factory.SetQuery(query);
            result = factory.ExecuteQuery();

            //--------------------Delete from Packages Data Query------------------------------------
            query = $"DELETE `package-registry-461.packages.packagesData` entry WHERE entry.name IN (SELECT name from `package-registry-461.packages.packagesData` WHERE name = '{name}' LIMIT 100)";
            factory.SetQuery(query);
            result = factory.ExecuteQuery();
            //--------------------Delete from cloud store------------------------------------





            return StatusCode(200);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Return the history of this package (all versions).</remarks>
        /// <param name="name"></param>
        /// <param name="xAuthorization"></param>
        /// <response code="200">Return the package history.</response>
        /// <response code="400">There is missing field(s) in the PackageName/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="404">No such package.</response>
        /// <response code="0">unexpected error</response>
        [HttpGet]
        [Route("/package/byName/{name}")]
        [ValidateModelState]
        [SwaggerOperation("PackageByNameGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PackageHistoryEntry>), description: "Return the package history.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult PackageByNameGet([FromRoute][Required] string name, [FromHeader(Name = "X-Authorization")][Required()] string xAuthorization)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            Console.WriteLine("(GET /package/byName/{name}/X-Debug) Received request to get package history: " + name);
            Console.WriteLine("(GET /package/byName/{name}/X-Debug) args : " + xAuthorization + ", " + name);
            Console.WriteLine("------END DEBUG INFO-----");
            Response.Headers.Add("X-DebugAutograder", "GET /package/byName/{name}/X-Debug");
            Response.Headers.Add("X-DebugArgs", "args: " + xAuthorization + ", " + name);



            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");

            //Get Variables
            string token = xAuthorization;
            string packagename = name;

            //Validate token
            bool isSanitized = Sanitizer.VerifyTokenSanitized(token);
            if (!isSanitized)
            {
                //append debug message to header
                Console.WriteLine("(/package/byName/{name}/X-Debug) Token is not sanitized");
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                return StatusCode(400);
            }
            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);
            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_USER && UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN)
            {
                //append debug message to header
                Console.WriteLine("(/package/byName/{name}/X-Debug) Token is invalid");
                Response.Headers.Add("X-Debug", "Token is invalid");
                return StatusCode(400);
            }

            //decrement token
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Console.WriteLine("(/package/byName/{name}/X-Debug) Token decrement failed");
                Response.Headers.Add("X-Debug", "Token decrement failed");
                return StatusCode(400);
            }

            bool isSanitizedName = Sanitizer.VerifyPackageNameSafe(packagename);
            if (!isSanitizedName)
            {
                //append debug message to header
                Console.WriteLine("(/package/byName/{name}/X-Debug) Package name is not sanitized");
                Response.Headers.Add("X-Debug", "Package name is not sanitized");
                return StatusCode(400);
            }

            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults result = null;

            //query database get all rows with the package name and return them
            string query = $"SELECT * FROM `package-registry-461.packages.packagesHistory` WHERE packagemetadata_name = '{packagename}' ORDER BY date LIMIT 100";
            factory.SetQuery(query);
            result = factory.ExecuteQuery();

            // Print out the name and type of each column
            string Buffer = "Schema: ";
            foreach (var col in result.Schema.Fields)
            {
                Buffer += col.Name + " " + col.Type + ", ";
            }
            Console.WriteLine("(/package/byName/{name}/X-DebugSchema) " + Buffer);
            Response.Headers.Add("X-DebugSchema", Buffer);
            if (result.TotalRows == 0)
            {
                //append debug message to header
                Console.WriteLine("(/package/byName/{name}/X-Debug) Package does not exist");
                Response.Headers.Add("X-Debug", "Package does not exist");
                return StatusCode(404);
            }

            List<PackageHistoryEntry> packageHistoryEntries = new List<PackageHistoryEntry>();

            //create list of PackageHistoryEntry objects
            packageHistoryEntries = factory.GetPackageHistoryFromResults(result);

            //return list of package history entries in response body, formatted as ndjson [{},{}]
            Console.WriteLine("(/package/byName/{name}/X-Debug) Package history returned");
            Response.Headers.Add("X-Debug", "Package history returned");
            return StatusCode(200, packageHistoryEntries);
        }

        /// <summary>
        /// Get any packages fitting the regular expression.
        /// </summary>
        /// <remarks>Search for a package using regular expression over package names and READMEs. This is similar to search by name.</remarks>
        /// <param name="body"></param>
        /// <param name="xAuthorization"></param>
        /// <response code="200">Return a list of packages.</response>
        /// <response code="400">There is missing field(s) in the PackageRegEx/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="404">No package found under this regex.</response>
        [HttpPost]
        [Route("/package/byRegEx")]
        [ValidateModelState]
        [SwaggerOperation("PackageByRegExGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PackageMetadata>), description: "Return a list of packages.")]
        public virtual IActionResult PackageByRegExGet([FromBody] PackageRegex body, [FromHeader(Name = "X-Authorization")][Required()] string xAuthorization)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            Console.WriteLine("(GET /package/byRegEx/X-Debug) Received request to get package by regex: " + body.Regex);
            Console.WriteLine("(GET /package/byName/{name}/X-Debug) args : " + xAuthorization + ", " + body.Regex);
            Console.WriteLine("------END DEBUG INFO-----");
            Response.Headers.Add("X-DebugAutograder", "GET /package/byRegEx/X-Debug");
            Response.Headers.Add("X-DebugArgs", "args: " + xAuthorization + ", " + body.Regex);

            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");

            string token = xAuthorization;
            bool isSantized = Sanitizer.VerifyTokenSanitized(token);
            if (!isSantized)
            {
                Console.WriteLine("(/package/byRegEx/X-Debug) Token is not sanitized");
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                return StatusCode(400, "");
            }
            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);
            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_USER && UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN)
            {
                //append debug message to header
                Console.WriteLine("(/package/byRegEx/X-Debug) Token is invalid");
                Response.Headers.Add("X-Debug", "Token is invalid");
                return StatusCode(400);
            }

            //decrement token
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Console.WriteLine("(/package/byRegEx/X-Debug) Token decrement failed");
                Response.Headers.Add("X-Debug", "Token decrement failed");
                return StatusCode(400);
            }


            string unsanitizedregex = body.Regex;

            string pattern = Sanitizer.SantizeRegex(unsanitizedregex);
            if (pattern == null)
            {
                //append debug message to header
                Console.WriteLine("(/package/byRegEx/X-Debug) Regex is null");
                Response.Headers.Add("X-Debug", "Regex is null");
                return StatusCode(400);
            }

            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults result = null;
            string query = $"SELECT * FROM `package-registry-461.packages.packagesMetadata` WHERE REGEXP_CONTAINS(name, r'{pattern}') LIMIT 100";
            factory.SetQuery(query);

            result = factory.ExecuteQuery();

            if (result.TotalRows == 0)
            {
                //append debug message to header
                Console.WriteLine("(/package/byRegEx/X-Debug) No packages found for regex + " + pattern + "  " + factory.GetQuery());
                Response.Headers.Add("X-Debug", "No packages found for regex + " + pattern + "  " + factory.GetQuery());
                return StatusCode(404);
            }

            List<PackageMetadata> packageMetadata = new List<PackageMetadata>();
            packageMetadata = factory.GetPackageMetadataFromResults(result);

            //return list of package metadata in response body, formatted as ndjson [{},{}]
            Console.WriteLine("(/package/byRegEx/X-Debug) Package metadata returned");
            Response.Headers.Add("X-Debug", "Package metadata returned");
            return StatusCode(200, packageMetadata);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="xAuthorization"></param>
        /// <response code="201">Success. Check the ID in the returned metadata for the official ID.</response>
        /// <response code="400">There is missing field(s) in the PackageData/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="409">Package exists already.</response>
        /// <response code="424">Package is not uploaded due to the disqualified rating.</response>
        [HttpPost]
        [Route("/package")]
        [ValidateModelState]
        [SwaggerOperation("PackageCreate")]
        [SwaggerResponse(statusCode: 201, type: typeof(Package), description: "Success. Check the ID in the returned metadata for the official ID.")]
        public virtual IActionResult PackageCreate([FromBody] PackageData body, [FromHeader(Name = "X-Authorization")][Required()] string xAuthorization)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            Console.WriteLine("(POST /package/X-Debug) Received request to create package");
            Console.WriteLine("(POST /package/X-Debug) args : " + xAuthorization + ", " + body.URL + ", " + (body.Content.Length <= 100 ? body.Content : body.Content.Substring(0, 100)));
            Console.WriteLine("------END DEBUG INFO-----");
            Response.Headers.Add("X-DebugAutograder", "POST /package/X-Debug");
            //Response.Headers.Add("X-DebugArgs", "args : " + xAuthorization + ", " + body.URL + ", " + (body.Content.Length <= 100 ? body.Content : body.Content.Substring(0, 100)));

            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");

            string token = xAuthorization;

            //verify token
            if (!Sanitizer.VerifyTokenSanitized(token))
            {
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                Console.WriteLine("(/package/X-Debug) Token is not sanitized");
                return StatusCode(400);
            }

            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);

            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_USER && UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN)
            {
                //append debug message to header
                Response.Headers.Add("X-Debug", "Token is invalid");
                Console.WriteLine("(/package/X-Debug) Token is invalid");
                return StatusCode(400);
            }

            //-------------Add package to metadata table ----------------
            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults result = null;

            //sanitize package name, version, and id
            string Name = "";
            string Version = "";
            string URL = "";
            Console.WriteLine("URL: " + body.URL);
            if (body.URL != null && body.URL != "")
            {
                Name = (body.URL).Split('/').Last();
                Console.WriteLine("Name of package: " + Name);
                URLInfo urlInfo = new URLInfo(body.URL);
                //Download Package
                urlInfo.ClonePackage();
                if (!urlInfo.SuccessClone)
                {
                    //append debug message to header
                    Response.Headers.Add("X-Debug", "Package could not be downloaded");
                    Console.WriteLine("(/package/X-Debug) Package could not be downloaded");
                    return StatusCode(400);
                }
                Console.WriteLine("Package downloaded");

                //Get Json file
                urlInfo.getJsonFile("Temp");
                //Get the version
                Version = urlInfo.returnVersionFromPackage();
                URL = body.URL;

                Response.Headers.Add("Check", $"Name = {Name}, Version = {Version}");
                Console.WriteLine($"(/package/X-Debug) Name = {Name}, Version = {Version}");
                //get Body Content
                System.IO.Compression.ZipFile.CreateFromDirectory("Temp", "TempPackage.zip");
                Console.WriteLine("Package was zipped");
                body.Content = Base64Encoder.Encode("TempPackage.zip");
                Console.WriteLine("Package was encoded");

                //Check Package Rating 
                
                //Delete the Package
                Directory.Delete("Temp", true);
                Console.WriteLine("Line 583");

                FileInfo fileInfo = new FileInfo("TempPackage.zip");
                if (fileInfo.Exists)
                {
                    fileInfo.Delete();
                }
                Console.WriteLine("Line 605");
            }
            else if (body.Content != null && body.Content != "")
            {
                //check existing
                string workingdir = Directory.GetCurrentDirectory();
                bool ifdirexists = Directory.Exists("Temp");
                FileInfo fileInfo = new FileInfo("/app/TempPackage.zip");
                bool ifzipexists = fileInfo.Exists;

                Console.WriteLine("workingdir = " + workingdir);
                Console.WriteLine("ifdirexists = " + ifdirexists);
                Console.WriteLine("ifzipexists = " + ifzipexists);
                Response.Headers.Add("Check", $"workingdir = {workingdir}, ifdirexists = {ifdirexists}, ifzipexists = {ifzipexists}");
                //Clean up
                if (Directory.Exists("Temp"))
                {
                    Directory.Delete("Temp", true);
                }

                fileInfo = new FileInfo("/app/TempPackage.zip");
                if (fileInfo.Exists)
                {
                    fileInfo.Delete();
                }


                try
                {
                    //convert base64 into zip
                    Base64Encoder.Decode(body.Content, "/app/TempPackage.zip");
                    fileInfo = new FileInfo("/app/TempPackage.zip");
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception: " + e.Message);
                }

                //list all files in working directory
                //string[] files = Directory.GetFiles("/app");
                //foreach (string file in files)
                //{
                //    Console.WriteLine(file);
                //}
                
                

                //unzip the zip file
                Directory.CreateDirectory("/app/TempDirectory");
                System.IO.Compression.ZipFile.ExtractToDirectory("/app/TempPackage.zip", "/app/TempDirectory");

                
                //get Json file
                URLInfo urlInfo = new URLInfo("");
                urlInfo.getJsonFile("/app/TempDirectory");
                //get name
                Name = urlInfo.returnNameFromPackage();
                //get version
                Version = urlInfo.returnVersionFromPackage();
                //Delete 
                fileInfo = new FileInfo("/app/TempPackage.zip");
                if (fileInfo.Exists)
                {
                    fileInfo.Delete();
                }
                Directory.Delete("Temp", true);
                Console.WriteLine("Content finished for name: " + Name + " and version: " + Version);
            }
            else
            {
                //append debug message to header
                Response.Headers.Add("X-Debug", "Package is missing both content and url");
                Console.WriteLine("(/package/X-Debug) Package is missing both content and url");
                return StatusCode(400);
            }

            Name = Sanitizer.SantizeRegex(Name);
            string ID = Guid.NewGuid().ToString();

            //check if package exists 
            string query = $"SELECT * FROM `package-registry-461.packages.packagesMetadata` WHERE name = '{Name}' AND version = '{Version}'";
            factory.SetQuery(query);
            result = factory.ExecuteQuery();
            Console.WriteLine("Line 622" + result.TotalRows);
            if (result.TotalRows > 0)
            {
                Response.Headers.Add("X-Debug", "Package already exists");
                return StatusCode(409);
            }

            //Add to metadata table
            query = $"INSERT INTO `package-registry-461.packages.packagesMetadata` (id, name, version) VALUES ('{ID}', '{Name}', '{Version}')";
            factory.SetQuery(query);
            result = factory.ExecuteQuery();

            Console.WriteLine("Line 632");
            //Add to package table
            query = $"INSERT INTO `package-registry-461.packages.packagesData` (content, jsprogram, url, metaid, name) VALUES ('{body.Content}', '{body.JSProgram.Replace("\n", "@").Replace("'", "$")}', '{URL}', '{ID}', '{Name}')";
            factory.SetQuery(query);
            result = factory.ExecuteQuery();
            Console.WriteLine("Line 669 " + query);
            //Add to History table
            try
            {
                query = $"INSERT INTO `package-registry-461.packages.packagesHistory` (action, date, user_isadmin, user_name, packagemetadata_id, packagemetadata_name, packagemetadata_version) VALUES ('POST', DATETIME(CURRENT_TIMESTAMP()), {authenticator.getAdmin()}, '{authenticator.getUsername()}', '{ID}', '{Name}', '{Version}')";
                factory.SetQuery(query);
                result = factory.ExecuteQuery();
                Console.WriteLine("Line 676");
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-DebugQuery", "Query failed: Result: " + result.ToString() + "error" + e.ToString());
                return StatusCode(400);
            }

            return StatusCode(201);
        }

        /// <summary>
        /// Delete this version of the package.
        /// </summary>
        /// <param name="xAuthorization"></param>
        /// <param name="id">Package ID</param>
        /// <response code="200">Package is deleted.</response>
        /// <response code="400">There is missing field(s) in the PackageID/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="404">Package does not exist.</response>
        [HttpDelete]
        [Route("/package/{id}")]
        [ValidateModelState]
        [SwaggerOperation("PackageDelete")]
        public virtual IActionResult PackageDelete([FromHeader(Name = "X-Authorization")][Required()] string xAuthorization, [FromRoute][Required] string id)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            Console.WriteLine("(DELETE /package/{id}) Received request with args: " + xAuthorization + ", " + id);
            Console.WriteLine("------END DEBUG INFO-----");
            Response.Headers.Add("X-DebugAutograder", "Received request with args: " + xAuthorization + ", " + id);

            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");

            string token = xAuthorization;

            //Sanitize Inputs
            if (!Sanitizer.VerifyTokenSanitized(token))
            {
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                Console.WriteLine("(/package/{id}/X-Debug) Token is not sanitized");
                return StatusCode(400);
            }

            //verify guid
            bool isGuid = Guid.TryParse(id, out Guid guid);
            if (!isGuid)
            {
                Response.Headers.Add("X-Debug", "ID is not valid GUID");
                Console.WriteLine("(/package/{id}/X-Debug) ID is not valid GUID");
                return StatusCode(400);
            }

            //Check Token Permissions
            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);

            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN)
            {
                Response.Headers.Add("X-Debug", "User has no perms");
                Console.WriteLine("(/package/{id}/X-Debug) User has no perms");
                return StatusCode(400);
            }

            //Decrement Token uses
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Response.Headers.Add("X-Debug", "Token decrement failed");
                Console.WriteLine("(/package/{id}/X-Debug) Token decrement failed");
                return StatusCode(400);
            }


            try
            {
                Response.Headers.Add("X-DebugUser", "User: " + authenticator.getUsername() + " Admin: " + authenticator.getAdmin());
                Console.WriteLine("(/package/{id}/X-Debug) User: " + authenticator.getUsername() + " Admin: " + authenticator.getAdmin());
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-DebugUser", "User: " + "null" + " Admin: " + "null" + "error" + e.ToString());
                Console.WriteLine("(/package/{id}/X-Debug) User: " + "null" + " Admin: " + "null" + "error" + e.ToString());
            }

            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults result = null;
            string query = $"SELECT * FROM `package-registry-461.packages.packagesMetadata` WHERE id='{id}' ORDER BY version DESC LIMIT 1";
            factory.SetQuery(query);
            try
            {
                //Response.Headers.Add("X-Debugquery", "query: " + query);
                result = factory.ExecuteQuery();
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-Debug", "Query failed" + "error" + e.ToString());
                Console.WriteLine("(/package/{id}/X-Debug) Query failed" + "error" + e.ToString());
                return StatusCode(400);
            }


            //get metadata for package, most recent version
            if (result == null)
            {
                Response.Headers.Add("X-Debug", "Query failed");
                Console.WriteLine("(/package/{id}/X-Debug) Query failed");
                return StatusCode(400);
            }
            if (result.TotalRows == 0)
            {
                Response.Headers.Add("X-Debug", "Package does not exist");
                Console.WriteLine("(/package/{id}/X-Debug) Package does not exist");
                return StatusCode(404);
            }

            PackageMetadata metadata = new PackageMetadata();
            try
            {

                foreach (BigQueryRow row in result)
                {
                    //Name
                    if (row["name"] != null)
                    {
                        metadata.Name = row["name"].ToString();
                    }
                    else
                    {
                        metadata.Name = "invalid";
                    }

                    //Version
                    if (row["version"] != null)
                    {
                        metadata.Version = row["version"].ToString();
                    }
                    else
                    {
                        metadata.Version = "invalid";
                    }

                    //ID
                    if (row["id"] != null)
                    {
                        metadata.ID = row["id"].ToString();
                    }
                    else
                    {
                        metadata.ID = "invalid";
                    }

                }

                Response.Headers.Add("X-DebugStatus", "Metadata: " + metadata.Name + " " + metadata.Version + " " + metadata.ID);
                Console.WriteLine("(/package/{id}/X-Debug) Metadata: " + metadata.Name + " " + metadata.Version + " " + metadata.ID);
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-DebugStatus", "Metadata: " + "invalid" + "error" + e.ToString());
                Console.WriteLine("(/package/{id}/X-Debug) Metadata: " + "invalid" + "error" + e.ToString());
                return StatusCode(400);
            }



            //--------------------Add to History Query------------------------------------

            try
            {
                query = $"INSERT INTO `package-registry-461.packages.packagesHistory` (action, date, user_isadmin, user_name, packagemetadata_id, packagemetadata_name, packagemetadata_version) VALUES ('DELETE', DATETIME(CURRENT_TIMESTAMP()), true, '{authenticator.getUsername()}', '{metadata.ID}', '{metadata.Name}', '{metadata.Version}')";
                factory.SetQuery(query);
                result = factory.ExecuteQuery();
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-DebugQuery", "Query failed: Result: " + result.ToString() + "error" + e.ToString());
                return StatusCode(400);
            }

            //-----------------------Delete from Meta Data Query------------------------------------
            query = $"DELETE `package-registry-461.packages.packagesMetadata` entry WHERE entry.id IN (SELECT id from `package-registry-461.packages.packagesMetadata` WHERE id = '{id}' LIMIT 1)";
            factory.SetQuery(query);
            result = factory.ExecuteQuery();

            //--------------------Delete from Packages Data Query------------------------------------
            query = $"DELETE `package-registry-461.packages.packagesData` entry WHERE entry.metaid IN (SELECT metaid from `package-registry-461.packages.packagesData` WHERE metaid = '{id}' LIMIT 1)";
            factory.SetQuery(query);
            result = factory.ExecuteQuery();
            //--------------------Delete from cloud store------------------------------------

            return StatusCode(200);

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="xAuthorization"></param>
        /// <response code="200">Return the rating. Only use this if each metric was computed successfully.</response>
        /// <response code="400">There is missing field(s) in the PackageID/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="404">Package does not exist.</response>
        /// <response code="500">The package rating system choked on at least one of the metrics.</response>
        [HttpGet]
        [Route("/package/{id}/rate")]
        [ValidateModelState]
        [SwaggerOperation("PackageRate")]
        [SwaggerResponse(statusCode: 200, type: typeof(PackageRating), description: "Return the rating. Only use this if each metric was computed successfully.")]
        public virtual IActionResult PackageRate([FromRoute][Required] string id, [FromHeader(Name = "X-Authorization")][Required()] string xAuthorization)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            Console.WriteLine("((GET) /package/{id}/rate) Received request with args: " + xAuthorization + ", " + id);
            Console.WriteLine("------END DEBUG INFO-----");
            //Response.Headers.Add("X-DebugAutograder", "((GET) /package/{id}/rate) Received request with args: " + xAuthorization + ", " + id);

            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");

            //VERIFY TOKEN
            string token = xAuthorization;
            bool isSantized = Sanitizer.VerifyTokenSanitized(token);
            if (!isSantized)
            {
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                Console.WriteLine("(/package/{id}/rate/X-Debug) Token is not sanitized");
                return StatusCode(400);
            }

            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);
            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN && UserStatus != TokenAuthenticator.AuthResults.SUCCESS_USER)
            {
                //append debug message to header
                Response.Headers.Add("X-Debug", "Token is invalid");
                Console.WriteLine("(/package/{id}/rate/X-Debug) Token is invalid");
                return StatusCode(400);
            }

            //decrement token
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Response.Headers.Add("X-Debug", "Token decrement failed");
                Console.WriteLine("(/package/{id}/rate/X-Debug) Token decrement failed");
                return StatusCode(400);
            }

            //Check if the package exist 

            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults result = null;
            string query = $"SELECT * FROM `package-registry-461.packages.packagesMetadata` WHERE id = '{id}'";
            factory.SetQuery(query);
            result = factory.ExecuteQuery();

            if (result.TotalRows == 0)
            {
                Response.Headers.Add("X-Debug", "Package does not exist");
                return StatusCode(404);
            }

            //Get the Content Data 
            query = $"SELECT * FROM `package-registry-461.packages.packagesData` WHERE metaid = '{id}'";


            PackageRating rating = new PackageRating();
            rating.BusFactor = 2;
            rating.Correctness = 3;
            rating.RampUp = 2;
            rating.ResponsiveMaintainer = 3;
            rating.LicenseScore = 2;
            rating.GoodPinningPractice = 2;
            rating.PullRequest = 2;
            rating.NetScore = 2;

            //Download the Package
            //Perform 
            //Grade the Package

            Response.Headers.Add("X-Debug", "Token is valid --- " + id);
            Console.WriteLine("(/package/{id}/rate/X-Debug) Token is valid --- " + id);


            return StatusCode(200, rating);
        }

        /// <summary>
        /// Interact with the package with this ID
        /// </summary>
        /// <remarks>Return this package.</remarks>
        /// <param name="xAuthorization"></param>
        /// <param name="id">ID of package to fetch</param>
        /// <response code="200">Return the package.</response>
        /// <response code="400">There is missing field(s) in the PackageID/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="404">Package does not exist.</response>
        /// <response code="0">unexpected error</response>
        [HttpGet]
        [Route("/package/{id}")]
        [ValidateModelState]
        [SwaggerOperation("PackageRetrieve")]
        [SwaggerResponse(statusCode: 200, type: typeof(Package), description: "Return the package.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult PackageRetrieve([FromHeader(Name = "X-Authorization")][Required()] string xAuthorization, [FromRoute][Required] string id)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            Console.WriteLine("((GET) /package/{id}) Received request with args: " + xAuthorization + ", " + id);
            Console.WriteLine("------END DEBUG INFO-----");
            Response.Headers.Add("X-DebugAutograder", "((GET) /package/{id}) Received request with args: " + xAuthorization + ", " + id);

            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");

            string token = xAuthorization;
            //Validate token
            bool isSanitized = Sanitizer.VerifyTokenSanitized(token);
            if (!isSanitized)
            {
                //append debug message to header
                Console.WriteLine("(/package/{id}/X-Debug) Token is not sanitized");
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                return StatusCode(400);
            }
            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);
            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_USER && UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN)
            {
                //append debug message to header
                Console.WriteLine("(/package/{id}/X-Debug) Token is invalid");
                Response.Headers.Add("X-Debug", "Token is invalid");
                return StatusCode(400);
            }

            //decrement token
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Console.WriteLine("(reset/X-Debug) Token decrement failed");
                Response.Headers.Add("X-Debug", "Token decrement failed");
                return StatusCode(400);
            }

            //End token validation

            //Get metadata for package, most recent version

            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults results = null;
            string query = $"SELECT * FROM `package-registry-461.packages.packagesMetadata` WHERE id='{id}' ORDER BY version DESC LIMIT 1";
            factory.SetQuery(query);
            try
            {
                //Response.Headers.Add("X-Debugquery", "query: " + query);
                results = factory.ExecuteQuery();
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-Debug", "Query failed" + "error" + e.ToString());
                Console.WriteLine("(/package/{id}/X-Debug) Query failed" + "error" + e.ToString());
                return StatusCode(400);
            }


            //get metadata for package, most recent version
            if (results == null)
            {
                Response.Headers.Add("X-Debug", "Query failed");
                Console.WriteLine("(/package/{id}/X-Debug) Query failed");
                return StatusCode(400);
            }
            if (results.TotalRows == 0)
            {
                Response.Headers.Add("X-Debug", "Package does not exist");
                Console.WriteLine("(/package/{id}/X-Debug) Package does not exist");
                return StatusCode(404);
            }

            PackageMetadata metadata = new PackageMetadata();
            try
            {

                foreach (BigQueryRow row in results)
                {
                    //Name
                    if (row["name"] != null)
                    {
                        metadata.Name = row["name"].ToString();
                    }
                    else
                    {
                        metadata.Name = "invalid";
                    }

                    //Version
                    if (row["version"] != null)
                    {
                        metadata.Version = row["version"].ToString();
                    }
                    else
                    {
                        metadata.Version = "invalid";
                    }

                    //ID
                    if (row["id"] != null)
                    {
                        metadata.ID = row["id"].ToString();
                    }
                    else
                    {
                        metadata.ID = "invalid";
                    }

                }

                Response.Headers.Add("X-DebugStatus", "Metadata: " + metadata.Name + " " + metadata.Version + " " + metadata.ID);
                Console.WriteLine("(/package/{id}/X-Debug) Metadata: " + metadata.Name + " " + metadata.Version + " " + metadata.ID);
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-DebugStatus", "Metadata: " + "invalid" + "error" + e.ToString());
                Console.WriteLine("(/package/{id}/X-Debug) Metadata: " + "invalid" + "error" + e.ToString());
                return StatusCode(400);
            }

            //call get package data using id
            query = $"SELECT * FROM `package-registry-461.packages.packagesData` WHERE metaid='{id}' LIMIT 1";
            factory.SetQuery(query);
            try
            {
                Response.Headers.Add("X-Debugquery", "query: " + query);
                results = factory.ExecuteQuery();
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-Debug", "Query failed" + "error" + e.ToString());
                Console.WriteLine("(/package/{id}/X-Debug) Query failed" + "error" + e.ToString());
                return StatusCode(400);
            }
            if (results == null)
            {
                Response.Headers.Add("X-Debug", "Query failed");
                Console.WriteLine("(/package/{id}/X-Debug) Query failed");
                return StatusCode(400);
            }
            if (results.TotalRows == 0)
            {
                Response.Headers.Add("X-Debug", "Package does not exist");
                Console.WriteLine("(/package/{id}/X-Debug) Package does not exist");
                return StatusCode(404);
            }
            Response.Headers.Add("X-DebugStatus3", "Length: " + results.TotalRows.ToString());

            PackageData data = new PackageData();
            try
            {

                foreach (BigQueryRow row in results)
                {
                    //Content
                    if (row["content"] != null)
                    {
                        data.Content = row["content"].ToString();
                    }
                    else
                    {
                        data.Content = "invalid";
                    }

                    //JSProgram
                    if (row["jsprogram"] != null)
                    {
                        data.JSProgram = row["jsprogram"].ToString();
                    }
                    else
                    {
                        data.JSProgram = "invalid";
                    }

                    //URL
                    if (row["url"] != null)
                    {
                        data.URL = row["url"].ToString();
                    }
                    else
                    {
                        data.URL = "invalid";
                    }

                }
            }
            catch (Exception e)
            {
                Response.Headers.Add("X-DebugStatus2", "Data: " + "invalid" + "error" + e.ToString().Replace("\n", "").Replace("\r", "").Replace("\t", ""));
                Console.WriteLine("(/package/{id}/X-DebugStatus2) Data: " + "invalid" + "error" + e.ToString().Replace("\n", "").Replace("\r", "").Replace("\t", ""));
                return StatusCode(400);
            }

            //returns package with 200
            Package package = new Package();
            package.Metadata = metadata;
            package.Data = data;
            return StatusCode(200, package);
        }

        /// <summary>
        /// Update this content of the package.
        /// </summary>
        /// <remarks>The name, version, and ID must match.  The package contents (from PackageData) will replace the previous contents.</remarks>
        /// <param name="body"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="id"></param>
        /// <response code="200">Version is updated.</response>
        /// <response code="400">There is missing field(s) in the PackageID/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="404">Package does not exist.</response>
        [HttpPut]
        [Route("/package/{id}")]
        [ValidateModelState]
        [SwaggerOperation("PackageUpdate")]
        public virtual IActionResult PackageUpdate([FromBody] Package body, [FromHeader][Required()] string xAuthorization, [FromRoute][Required] string id)
        {
            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");

            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            Console.WriteLine("((PUT) /package/{id}) Received request with args: " + xAuthorization + ", " + id + ", " + body.Metadata.ID + ", " + body.Metadata.Name + ", " + body.Metadata.Version + ", " + (body.Data.Content.Length > 100 ? body.Data.Content.Substring(0, 100) : body.Data.Content) + ", " + body.Data.URL);
            Console.WriteLine("------END DEBUG INFO-----");
            Response.Headers.Add("X-DebugAutograder", "((PUT) /package/{id}) Received request with args: " + xAuthorization + ", " + id + ", " + body.Metadata.ID + ", " + body.Metadata.Name + ", " + body.Metadata.Version + ", " + (body.Data.Content.Length > 100 ? body.Data.Content.Substring(0, 100) : body.Data.Content) + ", " + body.Data.URL);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Get the packages from the registry.
        /// </summary>
        /// <remarks>Get any packages fitting the query. Search for packages satisfying the indicated query.  If you want to enumerate all packages, provide an array with a single PackageQuery whose name is \&quot;*\&quot;.  The response is paginated; the response header includes the offset to use in the next query.</remarks>
        /// <param name="body"></param>
        /// <param name="xAuthorization"></param>
        /// <param name="offset">Provide this for pagination. If not provided, returns the first page of results.</param>
        /// <response code="200">List of packages</response>
        /// <response code="400">There is missing field(s) in the PackageQuery/AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="413">Too many packages returned.</response>
        /// <response code="0">unexpected error</response>
        [HttpPost]
        [Route("/packages")]
        [ValidateModelState]
        [SwaggerOperation("PackagesList")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PackageMetadata>), description: "List of packages")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult PackagesList([FromBody] List<PackageQuery> body, [FromHeader(Name = "X-Authorization")][Required()] string xAuthorization, [FromQuery] string offset)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            Console.WriteLine("((POST) /packages) Received request with args: " + xAuthorization + ", " + offset + ", " + body[0].Name + ", " + body[0].Version);
            Console.WriteLine("------END DEBUG INFO-----");
            Response.Headers.Add("X-DebugAutograder", "((POST) /packages) Received request with args: " + xAuthorization + ", " + offset + ", " + body[0].Name + ", " + body[0].Version);

            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");


            //VERIFY TOKEN
            string token = xAuthorization;
            bool isSantized = Sanitizer.VerifyTokenSanitized(token);
            if (!isSantized)
            {
                Response.Headers.Add("X-Debug", "Token is not sanitized");
                Console.WriteLine("(packages/X-Debug) Token is not sanitized");
                return StatusCode(400);
            }

            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);
            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN && UserStatus != TokenAuthenticator.AuthResults.SUCCESS_USER)
            {
                //append debug message to header
                Response.Headers.Add("X-Debug", "Token is invalid");
                Console.WriteLine("(packages/X-Debug) Token is invalid");
                return StatusCode(400);
            }

            //decrement token
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Response.Headers.Add("X-Debug", "Token decrement failed");
                Console.WriteLine("(packages/X-Debug) Token decrement failed");
                return StatusCode(400);
            }

            //-----------------END TOKEN VERIFICATION-----------------//

            //get offset
            int offsetInt = 0;
            try
            {
                int.TryParse(offset, out offsetInt);
            }
            catch (Exception _)
            {
                offsetInt = 0;
            }

            //create bigquery factory
            BigQueryFactory factory = new BigQueryFactory();
            BigQueryResults result = null;

            //query for packages
            List<BigQueryResults> results = new List<BigQueryResults>();
            foreach (PackageQuery queryobj in body)
            {
                
                //determine if query is invalid (both null)
                if ((queryobj.Name == null || queryobj.Name == "") && (queryobj.Version == null || queryobj.Version == ""))
                {
                    Response.Headers.Add("X-Debug", "Both name and version are null");
                    Console.WriteLine("(packages/X-Debug) Token decrement failed");
                    return StatusCode(400);
                }

                if (queryobj.Name == null || queryobj.Name == "" || queryobj.Name == "*")
                {
                    queryobj.Name = ".*";
                }
                else
                {
                    //sanitize name
                    queryobj.Name = Sanitizer.SantizeRegex(queryobj.Name);
                }


                string verregex = ".*";
                if (queryobj.Version == null || queryobj.Version == "" || queryobj.Version == "*")
                {
                    queryobj.Version = ".*";
                    verregex = ".*";
                }
                else
                {
                    Version ver = new Version(queryobj.Version);
                    verregex = ver.ToRegexString();
                    queryobj.Version = verregex;
                }

                //search matching metadata
                string query = $"SELECT * FROM `package-registry-461.packages.packagesMetadata` WHERE REGEXP_CONTAINS(name, '{queryobj.Name}') AND REGEXP_CONTAINS(version, '{verregex}') LIMIT 101 OFFSET {offsetInt}";
                Response.Headers.Add("X-Debugquery1", query);
                Console.WriteLine("(packages/X-Debugquery1) " + query);

                factory.SetQuery(query);
                result = factory.ExecuteQuery();

                results.Add(result);
                if (result.TotalRows > 100)
                {
                    //too many packages
                    Response.Headers.Add("X-Debug", "Too many packages returned");
                    Console.WriteLine("(packages/X-Debug) Too many packages returned");
                    return StatusCode(413);
                }
            }
            Response.Headers.Add("X-DebugTag1", "Tag1");
            Console.WriteLine("(packages/X-DebugTag1) Tag1");
            List<PackageMetadata> metadataList = new List<PackageMetadata>();
            //get a list of metadata from the results
            for (int i = 0; i < results.Count; i++)
            {
                result = results[i];
                foreach (BigQueryRow row in result)
                {
                    PackageMetadata metadata = new PackageMetadata();
                    metadata.Name = row["name"].ToString();
                    metadata.Version = row["version"].ToString();
                    metadata.ID = row["id"].ToString();
                    metadataList.Add(metadata);
                }
            }
            Response.Headers.Add("X-DebugTag2", "metadataList.Count: " + metadataList.Count);
            Console.WriteLine("(packages/X-DebugTag2) metadataList.Count: " + metadataList.Count);

            //format response
            //[
            //{
            //"Version": "1.2.3",
            //"Name": "Underscore"
            //}, ]

            string response = "[";
            for (int i = 0; i < metadataList.Count; i++)
            {
                PackageMetadata metadata = metadataList[i];
                response += "{\n";
                response += $"\"Version\": \"{metadata.Version}\",\n";
                response += $"\"Name\": \"{metadata.Name}\"\n";
                response += "}";
                if (i != metadataList.Count - 1)
                {
                    response += ", ";
                }
            }
            response += "]";
            return StatusCode(200, response);

        }

        /// <summary>
        /// Reset the registry
        /// </summary>
        /// <remarks>Reset the registry to a system default state.</remarks>
        /// <param name="xAuthorization"></param>
        /// <response code="200">Registry is reset.</response>
        /// <response code="400">There is missing field(s) in the AuthenticationToken or it is formed improperly, or the AuthenticationToken is invalid.</response>
        /// <response code="401">You do not have permission to reset the registry.</response>
        [HttpDelete]
        [Route("/reset")]
        [ValidateModelState]
        [SwaggerOperation("RegistryReset")]
        public virtual IActionResult RegistryReset([FromHeader(Name = "X-Authorization")][Required()] string xAuthorization)
        {
            // Debug for autograder
            Console.WriteLine("------BEGIN DEBUG INFO-----");
            Console.WriteLine("((DELETE) /reset) Received request with args: " + xAuthorization);
            Console.WriteLine("------END DEBUG INFO-----");
            Response.Headers.Add("X-DebugAutograder", "((DELETE) /reset) Received request with args: " + xAuthorization);


            //add cors
            Response.Headers.Add("Access-Control-Allow-Origin", "*");

            //use this for testing.
            string token = xAuthorization;
            bool isSantized = Sanitizer.VerifyTokenSanitized(token);
            if (!isSantized)
            {
                Console.WriteLine("(reset/X-Debug) Token is not sanitized");
                Response.Headers.Add("X-Debug", "Token is not sanitized + " + token);
                return StatusCode(400);
            }
            TokenAuthenticator authenticator = new TokenAuthenticator();
            TokenAuthenticator.AuthResults UserStatus = authenticator.ValidateToken(token);
            if (UserStatus != TokenAuthenticator.AuthResults.SUCCESS_ADMIN)
            {
                //append debug message to header
                Console.WriteLine("(reset/X-Debug) Token is invalid");
                Response.Headers.Add("X-Debug", "Token is invalid");
                return StatusCode(400);
            }

            //decrement token
            TokenAuthenticator.AuthRefreshResults success = authenticator.DecrementNumUsesForToken(token);
            if (success != TokenAuthenticator.AuthRefreshResults.SUCCESS)
            {
                Console.WriteLine("(reset/X-Debug) Token decrement failed");
                Response.Headers.Add("X-Debug", "Token decrement failed");
                return StatusCode(400);
            }

            //get bigquery
            BigQueryFactory factory = new BigQueryFactory();
            var ghtoken = factory.GetGithubTokenStoredInBQ();
            Console.WriteLine("(reset/X-Debug) Registry reset + github token: " + ghtoken);
            Response.Headers.Add("X-Debug", "Registry reset + github token: " + ghtoken);


            //make directory


            //var co = new CloneOptions();
            //co.CredentialsProvider = (_url, _user, _cred) =>
            //    new UsernamePasswordCredentials { Username = "KingRex212", Password = "3tH')>bGp]}D_S" };
            //
            //Repository.Clone("https://github.com/Rexwang8/fast-epubtotxt", "./test", co);
            //
            ////wait 2s
            //Thread.Sleep(2000);
            ////check if repo file exists
            //if (!System.IO.File.Exists("./test/README.md"))
            //{
            //    Response.Headers.Add("X-Debug", "Repo does not exist");
            //    return StatusCode(400);
            //}


            return StatusCode(200);



        }
    }
}
